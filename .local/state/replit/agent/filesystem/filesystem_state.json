{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a modern real estate website called \"Island Properties\" built as a full-stack React application. The application features a comprehensive property listing system with categorized properties (houses, land, condos, beachfront, commercial, and agriculture), testimonials, and a clean minimalistic design using shadcn/ui components with Tailwind CSS.\n\nThe application follows a monorepo structure with separate client and server directories, shared schemas, and a PostgreSQL database for data persistence. It's designed to showcase real estate properties with professional presentation and user-friendly navigation.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite as the build tool\n- **Routing**: Wouter for lightweight client-side routing\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables for theming\n- **State Management**: TanStack Query for server state management and API data fetching\n- **Forms**: React Hook Form with Zod validation resolvers\n- **Design System**: Azure-inspired color palette with minimalistic aesthetic, custom fonts (Inter/Poppins), and responsive design\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling and request logging middleware\n- **Development Server**: Vite dev server integration for full-stack development experience\n- **Build Process**: ESBuild for server bundling, Vite for client bundling\n\n## Data Storage Solutions\n- **Database**: PostgreSQL using Neon serverless database\n- **ORM**: Drizzle ORM with type-safe queries and migrations\n- **Schema Management**: Shared TypeScript schemas using Drizzle Zod integration\n- **Development Storage**: In-memory storage implementation for development/testing\n- **Data Models**: Users, Properties (with category-specific fields), and Testimonials\n\n## Authentication and Authorization\n- **Session Management**: Express sessions with PostgreSQL session store (connect-pg-simple)\n- **User Model**: Basic username/password authentication structure\n- **Security**: Environment-based configuration, secure session handling\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: @neondatabase/serverless for PostgreSQL connectivity\n- **ORM**: drizzle-orm and drizzle-kit for database operations and migrations\n- **UI Framework**: Complete Radix UI component suite (@radix-ui/react-*)\n- **State Management**: @tanstack/react-query for server state\n- **Form Handling**: @hookform/resolvers for form validation\n- **Styling**: tailwindcss, autoprefixer, postcss for styling infrastructure\n\n### Development Tools\n- **Build Tools**: Vite for development and building, esbuild for server bundling\n- **TypeScript**: Full TypeScript support across client, server, and shared code\n- **Development Utilities**: @replit/vite-plugin-runtime-error-modal and @replit/vite-plugin-cartographer for Replit integration\n\n### UI and UX Libraries\n- **Component Variants**: class-variance-authority for component styling variants\n- **Utility Libraries**: clsx for conditional classNames, date-fns for date handling\n- **Interactive Components**: cmdk for command palette, embla-carousel-react for carousels\n- **Icons**: lucide-react for consistent iconography\n\nThe architecture prioritizes type safety, developer experience, and maintainability with a clear separation between client, server, and shared code. The use of modern tools like Drizzle ORM and TanStack Query provides excellent TypeScript integration and developer productivity.","size_bytes":3775},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cookieParser from \"cookie-parser\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2133},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { randomUUID } from \"crypto\";\nimport { storage } from \"./storage\";\n\n// Simple session storage for demo\nconst adminSessions = new Map<string, { adminUserId: string; expiresAt: Date }>();\n\n// Admin authentication middleware\nconst adminAuth = async (req: Request & { adminUser?: any }, res: Response, next: NextFunction) => {\n  const token = req.headers.authorization?.replace('Bearer ', '') || req.cookies?.adminToken;\n  \n  if (!token) {\n    return res.status(401).json({ message: \"Unauthorized: No token provided\" });\n  }\n\n  const session = adminSessions.get(token);\n  if (!session || session.expiresAt < new Date()) {\n    if (session) adminSessions.delete(token);\n    return res.status(401).json({ message: \"Unauthorized: Invalid or expired session\" });\n  }\n\n  const adminUser = await storage.getAdminUser(session.adminUserId);\n  if (!adminUser) {\n    adminSessions.delete(token);\n    return res.status(401).json({ message: \"Unauthorized: Admin user not found\" });\n  }\n\n  req.adminUser = adminUser;\n  next();\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Properties API\n  app.get(\"/api/properties\", async (_req, res) => {\n    try {\n      const properties = await storage.getAllProperties();\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/hot\", async (_req, res) => {\n    try {\n      const properties = await storage.getHotProperties();\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch hot properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/featured\", async (_req, res) => {\n    try {\n      const properties = await storage.getFeaturedProperties();\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch featured properties\" });\n    }\n  });\n\n  app.get(\"/api/properties/category/:category\", async (req, res) => {\n    try {\n      const properties = await storage.getPropertiesByCategory(req.params.category);\n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch properties by category\" });\n    }\n  });\n\n  app.get(\"/api/properties/:id\", async (req, res) => {\n    try {\n      const property = await storage.getProperty(req.params.id);\n      if (!property) {\n        return res.status(404).json({ error: \"Property not found\" });\n      }\n      res.json(property);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch property\" });\n    }\n  });\n\n  // Testimonials API\n  app.get(\"/api/testimonials\", async (_req, res) => {\n    try {\n      const testimonials = await storage.getAllTestimonials();\n      res.json(testimonials);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch testimonials\" });\n    }\n  });\n\n  // Admin Authentication Routes\n  app.post(\"/api/admin/login\", async (req, res) => {\n    try {\n      const { email, password, rememberMe } = req.body;\n\n      if (!email || !password) {\n        return res.status(400).json({ message: \"Email and password are required\" });\n      }\n\n      const adminUser = await storage.getAdminUserByEmail(email);\n      if (!adminUser) {\n        // Log failed login attempt\n        await storage.createSecurityLog({\n          adminUserId: null,\n          action: \"failed_login\",\n          ipAddress: req.ip,\n          userAgent: req.headers['user-agent'],\n          details: { email, reason: \"User not found\" }\n        });\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Check if account is locked\n      if (adminUser.lockedUntil && adminUser.lockedUntil > new Date()) {\n        return res.status(423).json({ \n          message: \"Account is temporarily locked due to multiple failed login attempts\",\n          lockedUntil: adminUser.lockedUntil\n        });\n      }\n\n      // Simple password check (in production, use bcrypt)\n      if (adminUser.password !== password) {\n        // Increment login attempts\n        const newAttempts = (adminUser.loginAttempts || 0) + 1;\n        const updates: any = { loginAttempts: newAttempts };\n        \n        // Lock account after 5 failed attempts\n        if (newAttempts >= 5) {\n          updates.lockedUntil = new Date(Date.now() + 15 * 60 * 1000); // 15 minutes\n        }\n        \n        await storage.updateAdminUser(adminUser.id, updates);\n        \n        await storage.createSecurityLog({\n          adminUserId: adminUser.id,\n          action: \"failed_login\",\n          ipAddress: req.ip,\n          userAgent: req.headers['user-agent'],\n          details: { email, attempt: newAttempts }\n        });\n\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Successful login - reset attempts and update last login\n      await storage.updateAdminUser(adminUser.id, {\n        loginAttempts: 0,\n        lockedUntil: null,\n        lastLogin: new Date()\n      });\n\n      // Create session\n      const token = randomUUID();\n      const expiresAt = new Date(Date.now() + (rememberMe ? 7 * 24 : 2) * 60 * 60 * 1000);\n      adminSessions.set(token, { adminUserId: adminUser.id, expiresAt });\n\n      // Log successful login\n      await storage.createSecurityLog({\n        adminUserId: adminUser.id,\n        action: \"login\",\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'],\n        details: { email, rememberMe }\n      });\n\n      // Set secure cookie\n      res.cookie('adminToken', token, {\n        httpOnly: true,\n        secure: true,\n        maxAge: expiresAt.getTime() - Date.now()\n      });\n\n      res.json({\n        success: true,\n        user: {\n          id: adminUser.id,\n          email: adminUser.email,\n          role: adminUser.role\n        },\n        token,\n        expiresAt\n      });\n    } catch (error) {\n      console.error(\"Admin login error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/admin/logout\", adminAuth, async (req: any, res) => {\n    try {\n      const token = req.headers.authorization?.replace('Bearer ', '') || req.cookies?.adminToken;\n      \n      if (token) {\n        adminSessions.delete(token);\n        res.clearCookie('adminToken');\n      }\n\n      // Log logout\n      await storage.createSecurityLog({\n        adminUserId: req.adminUser.id,\n        action: \"logout\",\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent']\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Logout failed\" });\n    }\n  });\n\n  // Admin Dashboard Stats\n  app.get(\"/api/admin/dashboard/stats\", adminAuth, async (req, res) => {\n    try {\n      const properties = await storage.getAllProperties();\n      const totalProperties = properties.length;\n      \n      const propertiesByCategory = {\n        houses: properties.filter(p => p.category === 'houses').length,\n        land: properties.filter(p => p.category === 'land').length,\n        condos: properties.filter(p => p.category === 'condos').length,\n        beach: properties.filter(p => p.category === 'beach').length,\n        commercial: properties.filter(p => p.category === 'commercial').length,\n        agriculture: properties.filter(p => p.category === 'agriculture').length,\n      };\n\n      const recentActivity = await storage.getSecurityLogs(10);\n\n      res.json({\n        totalProperties,\n        propertiesByCategory,\n        recentActivity: recentActivity.map(log => ({\n          id: log.id,\n          action: log.action,\n          timestamp: log.createdAt,\n          user: log.adminUserId ? 'Admin User' : 'Unknown'\n        }))\n      });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // Admin Property CRUD Routes\n  app.get(\"/api/admin/properties\", adminAuth, async (req, res) => {\n    try {\n      const { category, status, search } = req.query;\n      let properties = await storage.getAllProperties();\n      \n      // Filter by category\n      if (category) {\n        properties = properties.filter(p => p.category === category);\n      }\n      \n      // Filter by status (featured, hot)\n      if (status === 'featured') {\n        properties = properties.filter(p => p.isFeatured);\n      } else if (status === 'hot') {\n        properties = properties.filter(p => p.isHot);\n      }\n      \n      // Search filter\n      if (search) {\n        const searchTerm = (search as string).toLowerCase();\n        properties = properties.filter(p => \n          p.title.toLowerCase().includes(searchTerm) ||\n          p.location.toLowerCase().includes(searchTerm) ||\n          p.description.toLowerCase().includes(searchTerm)\n        );\n      }\n      \n      res.json(properties);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch properties\" });\n    }\n  });\n\n  app.post(\"/api/admin/properties\", adminAuth, async (req: any, res) => {\n    try {\n      const property = await storage.createProperty(req.body);\n      \n      // Log the creation\n      await storage.createSecurityLog({\n        adminUserId: req.adminUser.id,\n        action: \"create_property\",\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'],\n        details: { propertyId: property.id, title: property.title, category: property.category }\n      });\n      \n      res.status(201).json(property);\n    } catch (error) {\n      console.error(\"Create property error:\", error);\n      res.status(400).json({ error: \"Failed to create property\" });\n    }\n  });\n\n  app.put(\"/api/admin/properties/:id\", adminAuth, async (req: any, res) => {\n    try {\n      const property = await storage.updateProperty(req.params.id, req.body);\n      \n      // Log the update\n      await storage.createSecurityLog({\n        adminUserId: req.adminUser.id,\n        action: \"update_property\",\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'],\n        details: { propertyId: property.id, title: property.title, category: property.category }\n      });\n      \n      res.json(property);\n    } catch (error) {\n      console.error(\"Update property error:\", error);\n      res.status(400).json({ error: error.message || \"Failed to update property\" });\n    }\n  });\n\n  app.delete(\"/api/admin/properties/:id\", adminAuth, async (req: any, res) => {\n    try {\n      const property = await storage.getProperty(req.params.id);\n      if (!property) {\n        return res.status(404).json({ error: \"Property not found\" });\n      }\n      \n      await storage.deleteProperty(req.params.id);\n      \n      // Log the deletion\n      await storage.createSecurityLog({\n        adminUserId: req.adminUser.id,\n        action: \"delete_property\",\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'],\n        details: { propertyId: req.params.id, title: property.title, category: property.category }\n      });\n      \n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete property\" });\n    }\n  });\n\n  // Bulk operations for properties\n  app.post(\"/api/admin/properties/bulk\", adminAuth, async (req: any, res) => {\n    try {\n      const { action, propertyIds } = req.body;\n      \n      if (!action || !propertyIds || !Array.isArray(propertyIds)) {\n        return res.status(400).json({ error: \"Invalid bulk operation request\" });\n      }\n      \n      const results = [];\n      \n      for (const id of propertyIds) {\n        try {\n          switch (action) {\n            case 'delete':\n              await storage.deleteProperty(id);\n              break;\n            case 'feature':\n              await storage.updateProperty(id, { isFeatured: true });\n              break;\n            case 'unfeature':\n              await storage.updateProperty(id, { isFeatured: false });\n              break;\n            case 'hot':\n              await storage.updateProperty(id, { isHot: true });\n              break;\n            case 'unhot':\n              await storage.updateProperty(id, { isHot: false });\n              break;\n            default:\n              throw new Error(`Unknown action: ${action}`);\n          }\n          results.push({ id, success: true });\n        } catch (error) {\n          results.push({ id, success: false, error: error.message });\n        }\n      }\n      \n      // Log the bulk operation\n      await storage.createSecurityLog({\n        adminUserId: req.adminUser.id,\n        action: \"bulk_property_operation\",\n        ipAddress: req.ip,\n        userAgent: req.headers['user-agent'],\n        details: { action, propertyIds, results }\n      });\n      \n      res.json({ results });\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to perform bulk operation\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":12928},"server/storage.ts":{"content":"import { \n  type User, \n  type InsertUser, \n  type Property, \n  type InsertProperty, \n  type Testimonial, \n  type InsertTestimonial,\n  type AdminUser,\n  type InsertAdminUser,\n  type BlogPost,\n  type InsertBlogPost,\n  type FAQ,\n  type InsertFAQ,\n  type SecurityLog,\n  type InsertSecurityLog\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Properties\n  getAllProperties(): Promise<Property[]>;\n  getProperty(id: string): Promise<Property | undefined>;\n  getPropertiesByCategory(category: string): Promise<Property[]>;\n  getFeaturedProperties(): Promise<Property[]>;\n  getHotProperties(): Promise<Property[]>;\n  createProperty(property: InsertProperty): Promise<Property>;\n  updateProperty(id: string, property: Partial<InsertProperty>): Promise<Property>;\n  deleteProperty(id: string): Promise<void>;\n  \n  // Testimonials\n  getAllTestimonials(): Promise<Testimonial[]>;\n  createTestimonial(testimonial: InsertTestimonial): Promise<Testimonial>;\n  updateTestimonial(id: string, testimonial: Partial<InsertTestimonial>): Promise<Testimonial>;\n  deleteTestimonial(id: string): Promise<void>;\n  \n  // Admin Users\n  getAdminUser(id: string): Promise<AdminUser | undefined>;\n  getAdminUserByEmail(email: string): Promise<AdminUser | undefined>;\n  createAdminUser(user: InsertAdminUser): Promise<AdminUser>;\n  updateAdminUser(id: string, user: Partial<InsertAdminUser>): Promise<AdminUser>;\n  \n  // Blog Posts\n  getAllBlogPosts(): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, post: Partial<InsertBlogPost>): Promise<BlogPost>;\n  deleteBlogPost(id: string): Promise<void>;\n  \n  // FAQ\n  getAllFAQs(): Promise<FAQ[]>;\n  getFAQ(id: string): Promise<FAQ | undefined>;\n  createFAQ(faq: InsertFAQ): Promise<FAQ>;\n  updateFAQ(id: string, faq: Partial<InsertFAQ>): Promise<FAQ>;\n  deleteFAQ(id: string): Promise<void>;\n  \n  // Security Logs\n  createSecurityLog(log: InsertSecurityLog): Promise<SecurityLog>;\n  getSecurityLogs(limit?: number): Promise<SecurityLog[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private properties: Map<string, Property>;\n  private testimonials: Map<string, Testimonial>;\n  private adminUsers: Map<string, AdminUser>;\n  private blogPosts: Map<string, BlogPost>;\n  private faqs: Map<string, FAQ>;\n  private securityLogs: SecurityLog[];\n\n  constructor() {\n    this.users = new Map();\n    this.properties = new Map();\n    this.testimonials = new Map();\n    this.adminUsers = new Map();\n    this.blogPosts = new Map();\n    this.faqs = new Map();\n    this.securityLogs = [];\n    \n    // Initialize with sample data\n    this.initializeSampleData();\n  }\n\n  private async initializeSampleData() {\n    // Sample properties - comprehensive detailed data for each category\n    const sampleProperties: InsertProperty[] = [\n      {\n        title: \"Private White Sand Beachfront Resort\",\n        price: \"50000000\",\n        pricePerSqm: \"₱10,000\",\n        location: \"Anda, Bohol\",\n        category: \"beach\",\n        description: \"Exceptional beachfront resort property with pristine white sand beach.\",\n        detailedDescription: \"Spectacular beachfront resort featuring 150 meters of pristine white sand beach, 5 traditional native cottages, main house, and all necessary permits for resort operations. Perfect for investment or personal retreat.\",\n        features: [\"Swimming\", \"Snorkeling\", \"Kayaking\", \"Beach volleyball\"],\n        images: [\n          \"https://images.unsplash.com/photo-1613490493576-7fde63acd811?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1544551763-46a013bb70d5?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n        ],\n        contactInfo: { phone: \"+63 917 456 7890\", email: \"carlos@islandproperties.ph\" },\n        brokerName: \"Carlos Mendoza\",\n        brokerPhone: \"+63 917 456 7890\",\n        brokerEmail: \"carlos@islandproperties.ph\",\n        titleType: \"Clean Title\",\n        isHot: true,\n        categoryData: {\n          beachfrontMeters: 150,\n          landSizeSqm: 5000,\n          beachType: \"Pristine White Sand\",\n          waterDepth: \"Gradual slope, safe for swimming\",\n          tidalInfo: \"Minimal tidal variation\",\n          accessRoad: \"Concrete road to property\",\n          utilitiesWater: \"Artesian well + municipal supply\",\n          utilitiesElectricity: \"Generator + solar backup\",\n          existingStructures: \"5 native cottages, main house\",\n          environmentalPermits: \"DOT accredited, all permits current\",\n          beachActivities: [\"Swimming\", \"Snorkeling\", \"Kayaking\", \"Beach volleyball\"],\n          nearbyAttractions: \"Lamanoc Island, Cabagnow Cave Pool\",\n          divingSpots: \"Excellent house reef for diving\",\n          fishingRights: \"Traditional fishing area\"\n        }\n      },\n      {\n        title: \"Modern 4-Bedroom Villa with Pool\",\n        price: \"25000000\",\n        pricePerSqm: \"₱35,000\",\n        location: \"Tagbilaran Heights, Bohol\",\n        category: \"houses\",\n        bedrooms: 4,\n        bathrooms: 3,\n        squareFeet: 350,\n        yearBuilt: 2020,\n        propertyType: \"Single Detached\",\n        description: \"Stunning modern villa featuring contemporary design with resort-style amenities.\",\n        detailedDescription: \"Exceptional modern villa featuring contemporary design, resort-style backyard with swimming pool, landscaped gardens, and premium finishes throughout. Perfect family home with all modern conveniences.\",\n        features: [\"CCTV\", \"Alarm System\", \"24/7 Security\", \"Central AC\"],\n        images: [\n          \"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1568605114967-8130f3a36994?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1613977257363-707ba9348227?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n        ],\n        contactInfo: { phone: \"+63 917 123 4567\", email: \"maria@islandproperties.ph\" },\n        brokerName: \"Maria Santos\",\n        brokerPhone: \"+63 917 123 4567\",\n        brokerEmail: \"maria@islandproperties.ph\",\n        titleType: \"Clean Title\",\n        isHot: true,\n        categoryData: {\n          lotSizeSqm: 800,\n          parkingSpaces: 2,\n          stories: 2,\n          kitchenType: \"Modern European Style\",\n          flooring: \"Italian Marble & Hardwood\",\n          airConditioning: \"Central AC\",\n          securityFeatures: [\"CCTV\", \"Alarm System\", \"24/7 Security\"],\n          outdoorSpace: \"Landscaped Garden with Pool\",\n          swimmingPool: true,\n          balconyTerrace: \"Master Bedroom Balcony\",\n          propertyTax: \"₱45,000/year\",\n          hoaFees: \"None\"\n        }\n      },\n      {\n        title: \"Luxury 2BR Oceanview Penthouse\",\n        price: \"15000000\",\n        location: \"Seaside Towers, Tagbilaran City\",\n        category: \"condos\",\n        bedrooms: 2,\n        bathrooms: 2,\n        squareFeet: 120,\n        description: \"Spectacular penthouse unit with panoramic ocean and city views.\",\n        detailedDescription: \"Stunning 25th floor penthouse featuring panoramic ocean and city views, premium finishes, semi-furnished with high-end appliances, and access to world-class building amenities.\",\n        features: [\"Infinity Pool\", \"Gym\", \"Spa\", \"Rooftop Garden\"],\n        images: [\n          \"https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1560185893-a55cbc8c57e8?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n        ],\n        contactInfo: { phone: \"+63 917 345 6789\", email: \"lisa@islandproperties.ph\" },\n        brokerName: \"Lisa Fernandez\",\n        brokerPhone: \"+63 917 345 6789\",\n        brokerEmail: \"lisa@islandproperties.ph\",\n        titleType: \"Condominium Certificate of Title\",\n        isFeatured: true,\n        categoryData: {\n          floorLevel: \"25th Floor\",\n          buildingName: \"Seaside Towers\",\n          parkingSlots: 2,\n          associationDues: \"₱8,000/month\",\n          maintenanceFees: \"Included in association dues\",\n          buildingAmenities: [\"Infinity Pool\", \"Gym\", \"Spa\", \"Rooftop Garden\"],\n          security: \"24/7 Security, CCTV, Card Access\",\n          elevators: \"4 High-speed Elevators\",\n          viewType: \"Ocean and City View\",\n          balcony: \"10sqm Private Balcony\",\n          furnishedStatus: \"Semi-furnished\",\n          petPolicy: \"Small pets allowed\",\n          buildingAge: \"3 years old\"\n        }\n      },\n      {\n        title: \"Productive Coconut Plantation with Processing\",\n        price: \"12000000\",\n        pricePerSqm: \"₱1,200,000\",\n        location: \"Carmen, Bohol\",\n        category: \"agriculture\",\n        description: \"Fully operational coconut plantation with processing facilities and consistent production.\",\n        detailedDescription: \"Exceptional 10-hectare coconut plantation featuring 500+ mature coconut trees, complete processing facilities, organic certification, and established market connections. Includes caretaker house and worker housing.\",\n        features: [\"Copra dryer\", \"Processing equipment\", \"Farm tools\", \"Storage warehouses\"],\n        images: [\n          \"https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1416879595882-3373a0480b5b?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n        ],\n        contactInfo: { phone: \"+63 917 678 9012\", email: \"ricardo@islandproperties.ph\" },\n        brokerName: \"Ricardo Villanueva\",\n        brokerPhone: \"+63 917 678 9012\",\n        brokerEmail: \"ricardo@islandproperties.ph\",\n        titleType: \"Agricultural Free Patent\",\n        isFeatured: true,\n        categoryData: {\n          landSizeHectares: 10,\n          soilType: \"Rich alluvial soil, excellent drainage\",\n          currentCrops: \"Mature coconut trees (500+ trees)\",\n          irrigationSystem: \"Natural spring + irrigation channels\",\n          equipmentIncluded: [\"Copra dryer\", \"Processing equipment\", \"Farm tools\"],\n          roadAccess: \"All-weather farm-to-market road\",\n          storageFacilities: \"2 large storage warehouses\",\n          harvestHistory: \"Consistent 15,000 nuts/month average\",\n          organicCertification: \"Organic certified by OCCP\",\n          workerHousing: \"Caretaker house + 3 worker quarters\",\n          marketAccess: \"Direct buyers, 30 minutes to port\",\n          climateConditions: \"Ideal tropical climate\",\n          waterSource: \"Natural spring, year-round flow\"\n        }\n      },\n      {\n        title: \"Prime Commercial Building - City Center\",\n        price: \"35000000\",\n        location: \"CPG Avenue, Tagbilaran City\",\n        category: \"commercial\",\n        squareFeet: 800,\n        description: \"Excellent investment property in the heart of the business district.\",\n        detailedDescription: \"Prime corner commercial building in Tagbilaran's main business district, featuring mixed-use spaces, established tenants, and excellent rental income potential. Perfect investment opportunity.\",\n        features: [\"Restaurant\", \"Retail shops\", \"Office spaces\", \"High foot traffic\"],\n        images: [\n          \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1555774698-0b77e0d5fac6?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1497366216548-37526070297c?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n        ],\n        contactInfo: { phone: \"+63 917 567 8901\", email: \"elena@islandproperties.ph\" },\n        brokerName: \"Elena Rodriguez\",\n        brokerPhone: \"+63 917 567 8901\",\n        brokerEmail: \"elena@islandproperties.ph\",\n        titleType: \"Clean Title\",\n        isFeatured: true,\n        categoryData: {\n          buildingSizeSqm: 800,\n          lotSizeSqm: 400,\n          commercialType: \"Mixed-use Commercial Building\",\n          zoning: \"Commercial Business District\",\n          parkingSpaces: 10,\n          loadingDock: \"Rear loading access\",\n          currentIncome: \"₱180,000/month\",\n          rentalRate: \"₱200,000/month potential\",\n          footTraffic: \"High - main commercial strip\",\n          visibility: \"Prime corner location\",\n          currentTenants: [\"Restaurant\", \"Retail shops\", \"Office spaces\"],\n          leaseTerms: \"Various terms, 3-10 years\",\n          renovationNeeded: \"Minimal - well-maintained\",\n          expansionPotential: \"Can add 2 more floors\",\n          buildingAge: \"8 years old\"\n        }\n      },\n      {\n        title: \"Prime Residential Development Land\",\n        price: \"8000000\",\n        pricePerSqm: \"₱4,000\",\n        location: \"Panglao Island, Bohol\",\n        category: \"land\",\n        description: \"Exceptional development opportunity on Panglao Island with excellent potential.\",\n        detailedDescription: \"Premium 2,000 sqm development land on Panglao Island, perfectly positioned for residential subdivision or resort development. Features gentle topography, excellent road access, and all utilities available.\",\n        features: [\"Deep well available\", \"Fiber optic available\", \"6-meter concrete road\", \"Development potential\"],\n        images: [\n          \"https://images.unsplash.com/photo-1500076656116-558758c991c1?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\",\n          \"https://images.unsplash.com/photo-1441974231531-c6227db76b6e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\"\n        ],\n        contactInfo: { phone: \"+63 917 234 5678\", email: \"roberto@islandproperties.ph\" },\n        brokerName: \"Roberto Cruz\",\n        brokerPhone: \"+63 917 234 5678\",\n        brokerEmail: \"roberto@islandproperties.ph\",\n        titleType: \"Clean Title\",\n        isFeatured: true,\n        categoryData: {\n          totalAreaSqm: 2000,\n          totalAreaHectares: 0.2,\n          landClassification: \"Residential\",\n          topography: \"Gently Sloping\",\n          roadAccess: \"6-meter concrete road\",\n          utilitiesWater: \"Deep well available\",\n          utilitiesElectricity: \"Meralco connection ready\",\n          utilitiesInternet: \"Fiber optic available\",\n          zoning: \"Residential, R1 Classification\",\n          soilType: \"Clay loam, excellent for construction\",\n          floodHistory: \"No flood history\",\n          developmentPotential: \"Ideal for subdivision or resort\",\n          restrictions: \"40% lot coverage maximum\",\n          nearbyAmenities: \"5 minutes to Alona Beach, 10 minutes to airport\",\n          environmentalClearance: \"ECC obtained\"\n        }\n      }\n    ];\n\n    for (const property of sampleProperties) {\n      await this.createProperty(property);\n    }\n\n    // Sample testimonials\n    const sampleTestimonials: InsertTestimonial[] = [\n      {\n        name: \"Sarah Johnson\",\n        title: \"Property Investor\",\n        quote: \"Island Properties helped me find the perfect beachfront investment. Their expertise and professionalism exceeded my expectations.\",\n        avatar: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?ixlib=rb-4.0.3&auto=format&fit=crop&w=64&h=64\",\n        rating: 5\n      },\n      {\n        name: \"Michael Chen\",\n        title: \"Business Owner\",\n        quote: \"Outstanding service from start to finish. They found us the ideal commercial space for our expanding business.\",\n        avatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=64&h=64\",\n        rating: 5\n      },\n      {\n        name: \"Emma Rodriguez\",\n        title: \"First-Time Buyer\",\n        quote: \"As a first-time buyer, I was nervous about the process. The team at Island Properties made everything smooth and stress-free.\",\n        avatar: \"https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-4.0.3&auto=format&fit=crop&w=64&h=64\",\n        rating: 5\n      }\n    ];\n\n    for (const testimonial of sampleTestimonials) {\n      await this.createTestimonial(testimonial);\n    }\n\n    // Initialize admin users\n    await this.createAdminUser({\n      email: \"nubesmcgee@gmail.com\",\n      password: \".TwentyTwo22.\", // In production, this would be hashed\n      role: \"super_admin\"\n    });\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getAllProperties(): Promise<Property[]> {\n    return Array.from(this.properties.values());\n  }\n\n  async getProperty(id: string): Promise<Property | undefined> {\n    return this.properties.get(id);\n  }\n\n  async getPropertiesByCategory(category: string): Promise<Property[]> {\n    return Array.from(this.properties.values()).filter(\n      (property) => property.category === category\n    );\n  }\n\n  async getFeaturedProperties(): Promise<Property[]> {\n    return Array.from(this.properties.values()).filter(\n      (property) => property.isFeatured === true\n    );\n  }\n\n  async getHotProperties(): Promise<Property[]> {\n    return Array.from(this.properties.values()).filter(\n      (property) => property.isHot === true\n    );\n  }\n\n  async createProperty(insertProperty: InsertProperty): Promise<Property> {\n    const id = randomUUID();\n    const property: Property = { \n      ...insertProperty, \n      id,\n      bedrooms: insertProperty.bedrooms ?? null,\n      bathrooms: insertProperty.bathrooms ?? null,\n      squareFeet: insertProperty.squareFeet ?? null,\n      lotSize: insertProperty.lotSize ?? null,\n      yearBuilt: insertProperty.yearBuilt ?? null,\n      propertyType: insertProperty.propertyType ?? null,\n      isFeatured: insertProperty.isFeatured ?? false,\n      isHot: insertProperty.isHot ?? false,\n      features: insertProperty.features ?? null,\n      categoryData: insertProperty.categoryData ?? null\n    };\n    this.properties.set(id, property);\n    return property;\n  }\n\n  async getAllTestimonials(): Promise<Testimonial[]> {\n    return Array.from(this.testimonials.values());\n  }\n\n  async createTestimonial(insertTestimonial: InsertTestimonial): Promise<Testimonial> {\n    const id = randomUUID();\n    const testimonial: Testimonial = { \n      ...insertTestimonial, \n      id,\n      rating: insertTestimonial.rating ?? 5\n    };\n    this.testimonials.set(id, testimonial);\n    return testimonial;\n  }\n\n  // Additional property methods\n  async updateProperty(id: string, updates: Partial<InsertProperty>): Promise<Property> {\n    const existing = this.properties.get(id);\n    if (!existing) {\n      throw new Error(\"Property not found\");\n    }\n    const updated: Property = { ...existing, ...updates };\n    this.properties.set(id, updated);\n    return updated;\n  }\n\n  async deleteProperty(id: string): Promise<void> {\n    this.properties.delete(id);\n  }\n\n  async updateTestimonial(id: string, updates: Partial<InsertTestimonial>): Promise<Testimonial> {\n    const existing = this.testimonials.get(id);\n    if (!existing) {\n      throw new Error(\"Testimonial not found\");\n    }\n    const updated: Testimonial = { ...existing, ...updates };\n    this.testimonials.set(id, updated);\n    return updated;\n  }\n\n  async deleteTestimonial(id: string): Promise<void> {\n    this.testimonials.delete(id);\n  }\n\n  // Admin User methods\n  async getAdminUser(id: string): Promise<AdminUser | undefined> {\n    return this.adminUsers.get(id);\n  }\n\n  async getAdminUserByEmail(email: string): Promise<AdminUser | undefined> {\n    return Array.from(this.adminUsers.values()).find(\n      (user) => user.email === email\n    );\n  }\n\n  async createAdminUser(insertAdminUser: InsertAdminUser): Promise<AdminUser> {\n    const id = randomUUID();\n    const now = new Date();\n    const adminUser: AdminUser = {\n      ...insertAdminUser,\n      id,\n      loginAttempts: 0,\n      lockedUntil: null,\n      lastLogin: null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.adminUsers.set(id, adminUser);\n    return adminUser;\n  }\n\n  async updateAdminUser(id: string, updates: Partial<InsertAdminUser>): Promise<AdminUser> {\n    const existing = this.adminUsers.get(id);\n    if (!existing) {\n      throw new Error(\"Admin user not found\");\n    }\n    const updated: AdminUser = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.adminUsers.set(id, updated);\n    return updated;\n  }\n\n  // Blog Post methods\n  async getAllBlogPosts(): Promise<BlogPost[]> {\n    return Array.from(this.blogPosts.values());\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    return this.blogPosts.get(id);\n  }\n\n  async createBlogPost(insertBlogPost: InsertBlogPost): Promise<BlogPost> {\n    const id = randomUUID();\n    const now = new Date();\n    const blogPost: BlogPost = {\n      ...insertBlogPost,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.blogPosts.set(id, blogPost);\n    return blogPost;\n  }\n\n  async updateBlogPost(id: string, updates: Partial<InsertBlogPost>): Promise<BlogPost> {\n    const existing = this.blogPosts.get(id);\n    if (!existing) {\n      throw new Error(\"Blog post not found\");\n    }\n    const updated: BlogPost = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.blogPosts.set(id, updated);\n    return updated;\n  }\n\n  async deleteBlogPost(id: string): Promise<void> {\n    this.blogPosts.delete(id);\n  }\n\n  // FAQ methods\n  async getAllFAQs(): Promise<FAQ[]> {\n    return Array.from(this.faqs.values());\n  }\n\n  async getFAQ(id: string): Promise<FAQ | undefined> {\n    return this.faqs.get(id);\n  }\n\n  async createFAQ(insertFAQ: InsertFAQ): Promise<FAQ> {\n    const id = randomUUID();\n    const now = new Date();\n    const faq: FAQ = {\n      ...insertFAQ,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.faqs.set(id, faq);\n    return faq;\n  }\n\n  async updateFAQ(id: string, updates: Partial<InsertFAQ>): Promise<FAQ> {\n    const existing = this.faqs.get(id);\n    if (!existing) {\n      throw new Error(\"FAQ not found\");\n    }\n    const updated: FAQ = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n    this.faqs.set(id, updated);\n    return updated;\n  }\n\n  async deleteFAQ(id: string): Promise<void> {\n    this.faqs.delete(id);\n  }\n\n  // Security Log methods\n  async createSecurityLog(insertSecurityLog: InsertSecurityLog): Promise<SecurityLog> {\n    const id = randomUUID();\n    const securityLog: SecurityLog = {\n      ...insertSecurityLog,\n      id,\n      createdAt: new Date(),\n    };\n    this.securityLogs.push(securityLog);\n    return securityLog;\n  }\n\n  async getSecurityLogs(limit: number = 50): Promise<SecurityLog[]> {\n    return this.securityLogs\n      .sort((a, b) => b.createdAt!.getTime() - a.createdAt!.getTime())\n      .slice(0, limit);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":23848},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, decimal, jsonb, boolean, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const properties = pgTable(\"properties\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  price: decimal(\"price\", { precision: 12, scale: 2 }).notNull(),\n  location: text(\"location\").notNull(),\n  category: text(\"category\").notNull(), // houses, land, condos, beach, commercial, agriculture\n  bedrooms: integer(\"bedrooms\"),\n  bathrooms: integer(\"bathrooms\"),\n  squareFeet: integer(\"square_feet\"),\n  lotSize: text(\"lot_size\"),\n  yearBuilt: integer(\"year_built\"),\n  propertyType: text(\"property_type\"),\n  description: text(\"description\").notNull(),\n  features: jsonb(\"features\"),\n  images: jsonb(\"images\").notNull(),\n  videoUrl: text(\"video_url\"), // YouTube, Vimeo, or other video URLs\n  contactInfo: jsonb(\"contact_info\").notNull(),\n  isFeatured: boolean(\"is_featured\").default(false),\n  isHot: boolean(\"is_hot\").default(false),\n  // Category-specific fields stored as JSON\n  categoryData: jsonb(\"category_data\"),\n  // Additional detailed fields\n  pricePerSqm: text(\"price_per_sqm\"),\n  brokerName: text(\"broker_name\").notNull(),\n  brokerPhone: text(\"broker_phone\").notNull(),\n  brokerEmail: text(\"broker_email\").notNull(),\n  titleType: text(\"title_type\"),\n  detailedDescription: text(\"detailed_description\"),\n});\n\nexport const testimonials = pgTable(\"testimonials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  title: text(\"title\").notNull(),\n  quote: text(\"quote\").notNull(),\n  avatar: text(\"avatar\").notNull(),\n  rating: integer(\"rating\").default(5),\n});\n\n// Admin-specific tables\nexport const adminUsers = pgTable(\"admin_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"admin\"), // admin, super_admin\n  loginAttempts: integer(\"login_attempts\").default(0),\n  lockedUntil: timestamp(\"locked_until\"),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  featuredImage: text(\"featured_image\"),\n  category: text(\"category\").notNull(), // Market Insights, Local News, Investment Tips\n  tags: jsonb(\"tags\"),\n  seoTitle: text(\"seo_title\"),\n  seoDescription: text(\"seo_description\"),\n  status: text(\"status\").default(\"draft\"), // draft, published, scheduled\n  publishDate: timestamp(\"publish_date\"),\n  author: text(\"author\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const faqs = pgTable(\"faqs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  category: text(\"category\").notNull(), // Buying Process, Legal, Property Types, Financing\n  order: integer(\"order\").default(0),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const adminSessions = pgTable(\"admin_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminUserId: varchar(\"admin_user_id\").notNull(),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const securityLogs = pgTable(\"security_logs\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  adminUserId: varchar(\"admin_user_id\"),\n  action: text(\"action\").notNull(), // login, logout, failed_login, data_change\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  details: jsonb(\"details\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertPropertySchema = createInsertSchema(properties).omit({\n  id: true,\n});\n\nexport const insertTestimonialSchema = createInsertSchema(testimonials).omit({\n  id: true,\n});\n\n// Admin schemas\nexport const insertAdminUserSchema = createInsertSchema(adminUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFaqSchema = createInsertSchema(faqs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSecurityLogSchema = createInsertSchema(securityLogs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Property = typeof properties.$inferSelect;\nexport type InsertProperty = z.infer<typeof insertPropertySchema>;\nexport type Testimonial = typeof testimonials.$inferSelect;\nexport type InsertTestimonial = z.infer<typeof insertTestimonialSchema>;\n\n// Admin types\nexport type AdminUser = typeof adminUsers.$inferSelect;\nexport type InsertAdminUser = z.infer<typeof insertAdminUserSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type FAQ = typeof faqs.$inferSelect;\nexport type InsertFAQ = z.infer<typeof insertFaqSchema>;\nexport type AdminSession = typeof adminSessions.$inferSelect;\nexport type SecurityLog = typeof securityLogs.$inferSelect;\nexport type InsertSecurityLog = z.infer<typeof insertSecurityLogSchema>;\n","size_bytes":6171},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Listings from \"@/pages/listings\";\nimport PropertyDetail from \"@/pages/property-detail\";\nimport Houses from \"@/pages/houses\";\nimport Land from \"@/pages/land\";\nimport Condos from \"@/pages/condos\";\nimport Beach from \"@/pages/beach\";\nimport Commercial from \"@/pages/commercial\";\nimport Agriculture from \"@/pages/agriculture\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\n\n// Admin imports\nimport AdminLogin from \"@/pages/admin/login\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport AdminHouses from \"@/pages/admin/listings/houses\";\nimport AdminLand from \"@/pages/admin/listings/land\";\nimport AdminCondos from \"@/pages/admin/listings/condos\";\nimport AdminBeach from \"@/pages/admin/listings/beach\";\nimport AdminCommercial from \"@/pages/admin/listings/commercial\";\nimport AdminAgriculture from \"@/pages/admin/listings/agriculture\";\nimport AdminLayout from \"@/components/admin/admin-layout\";\n\nfunction ScrollToTop() {\n  const [location] = useLocation();\n  \n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [location]);\n  \n  return null;\n}\n\nfunction Router() {\n  return (\n    <>\n      <ScrollToTop />\n      <Switch>\n        <Route path=\"/\" component={Home} />\n        <Route path=\"/listings\" component={Listings} />\n        <Route path=\"/property/:id\" component={PropertyDetail} />\n        <Route path=\"/houses\" component={Houses} />\n        <Route path=\"/land\" component={Land} />\n        <Route path=\"/condos\" component={Condos} />\n        <Route path=\"/beach\" component={Beach} />\n        <Route path=\"/commercial\" component={Commercial} />\n        <Route path=\"/agriculture\" component={Agriculture} />\n        <Route path=\"/about\" component={About} />\n        <Route path=\"/contact\" component={Contact} />\n        \n        {/* Admin Routes */}\n        <Route path=\"/admin/login\" component={AdminLogin} />\n        <Route path=\"/admin/dashboard\" component={() => (\n          <AdminLayout>\n            <AdminDashboard />\n          </AdminLayout>\n        )} />\n        <Route path=\"/admin/listings/houses\" component={() => (\n          <AdminLayout>\n            <AdminHouses />\n          </AdminLayout>\n        )} />\n        <Route path=\"/admin/listings/land\" component={() => (\n          <AdminLayout>\n            <AdminLand />\n          </AdminLayout>\n        )} />\n        <Route path=\"/admin/listings/condos\" component={() => (\n          <AdminLayout>\n            <AdminCondos />\n          </AdminLayout>\n        )} />\n        <Route path=\"/admin/listings/beach\" component={() => (\n          <AdminLayout>\n            <AdminBeach />\n          </AdminLayout>\n        )} />\n        <Route path=\"/admin/listings/commercial\" component={() => (\n          <AdminLayout>\n            <AdminCommercial />\n          </AdminLayout>\n        )} />\n        <Route path=\"/admin/listings/agriculture\" component={() => (\n          <AdminLayout>\n            <AdminAgriculture />\n          </AdminLayout>\n        )} />\n        \n        <Route component={NotFound} />\n      </Switch>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3628},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(222 84% 15%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(222 84% 15%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(222 84% 15%);\n  --primary: hsl(208 100% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(221 83% 25%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(210 40% 96%);\n  --muted-foreground: hsl(215 16% 47%);\n  --accent: hsl(208 100% 92%);\n  --accent-foreground: hsl(222 84% 15%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(214 32% 91%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(208 100% 50%);\n  --chart-1: hsl(208 100% 50%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(210 40% 96%);\n  --sidebar-foreground: hsl(222 84% 15%);\n  --sidebar-primary: hsl(208 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(208 100% 92%);\n  --sidebar-accent-foreground: hsl(222 84% 15%);\n  --sidebar-border: hsl(214 32% 91%);\n  --sidebar-ring: hsl(208 100% 50%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(208 100% 50% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(208 100% 50% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 1px 2px -1px hsl(208 100% 50% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 1px 2px -1px hsl(208 100% 50% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 2px 4px -1px hsl(208 100% 50% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 4px 6px -1px hsl(208 100% 50% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 8px 10px -1px hsl(208 100% 50% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(208 100% 50% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(208 100% 50%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(208 100% 50%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(208 100% 50%);\n  --chart-1: hsl(208 100% 50%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(208 100% 50%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(208 100% 50%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(208 100% 50%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(208 100% 50% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(208 100% 50% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 1px 2px -1px hsl(208 100% 50% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 1px 2px -1px hsl(208 100% 50% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 2px 4px -1px hsl(208 100% 50% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 4px 6px -1px hsl(208 100% 50% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(208 100% 50% / 0.00), 0px 8px 10px -1px hsl(208 100% 50% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(208 100% 50% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .hero-bg {\n    background-image: url('https://i.imgur.com/6na9LR8.jpeg');\n    background-size: cover;\n    background-position: center;\n    background-attachment: fixed;\n  }\n  \n  .property-card {\n    transition: all 0.3s ease;\n  }\n  \n  .property-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  }\n  \n  .category-card {\n    transition: all 0.3s ease;\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .category-card::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: linear-gradient(135deg, rgba(0, 127, 255, 0.8), rgba(30, 58, 138, 0.6));\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n  \n  .category-card:hover::before {\n    opacity: 1;\n  }\n  \n  .category-card:hover {\n    transform: scale(1.02);\n  }\n  \n  .category-card .category-title {\n    position: relative;\n    z-index: 10;\n  }\n  \n  .btn-primary {\n    background: linear-gradient(135deg, var(--primary), var(--secondary));\n    transition: all 0.3s ease;\n  }\n  \n  .btn-primary:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 10px 20px rgba(0, 127, 255, 0.3);\n  }\n  \n  .sticky-header {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.95);\n    border-bottom: 1px solid hsl(214 32% 91% / 0.5);\n  }\n}\n","size_bytes":5809},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/category-card.tsx":{"content":"import { Link } from \"wouter\";\n\ninterface CategoryCardProps {\n  title: string;\n  href: string;\n  image: string;\n  className?: string;\n}\n\nexport default function CategoryCard({ title, href, image, className = \"\" }: CategoryCardProps) {\n  return (\n    <Link href={href}>\n      <div className={`category-card bg-card rounded-lg overflow-hidden shadow-lg cursor-pointer ${className}`}>\n        <img \n          src={image} \n          alt={`${title} category`}\n          className=\"w-full h-48 object-cover\"\n          data-testid={`category-image-${title.toLowerCase()}`}\n        />\n        <div className=\"p-4 text-center\">\n          <h3 \n            className=\"category-title text-lg font-semibold text-foreground\"\n            data-testid={`category-title-${title.toLowerCase()}`}\n          >\n            {title}\n          </h3>\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":872},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"bg-foreground text-background py-12\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-6\">\n              <img \n                src=\"https://i.imgur.com/42h36DK.png\" \n                alt=\"Island Properties Logo\" \n                className=\"h-8 w-auto brightness-0 invert\" \n              />\n              <span className=\"text-xl font-bold\">Island Properties</span>\n            </div>\n            <p className=\"text-background/80\">\n              Your trusted partner in finding the perfect property. Excellence in real estate since 2005.\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Quick Links</h4>\n            <ul className=\"space-y-2 text-background/80\">\n              <li><Link href=\"/\" className=\"hover:text-primary transition-colors\">Home</Link></li>\n              <li><Link href=\"/listings\" className=\"hover:text-primary transition-colors\">Listings</Link></li>\n              <li><Link href=\"/about\" className=\"hover:text-primary transition-colors\">About</Link></li>\n              <li><Link href=\"/contact\" className=\"hover:text-primary transition-colors\">Contact</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Property Types</h4>\n            <ul className=\"space-y-2 text-background/80\">\n              <li><Link href=\"/houses\" className=\"hover:text-primary transition-colors\">Houses</Link></li>\n              <li><Link href=\"/condos\" className=\"hover:text-primary transition-colors\">Condos</Link></li>\n              <li><Link href=\"/land\" className=\"hover:text-primary transition-colors\">Land</Link></li>\n              <li><Link href=\"/commercial\" className=\"hover:text-primary transition-colors\">Commercial</Link></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-4\">Connect With Us</h4>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"text-background/80 hover:text-primary transition-colors\"\n                data-testid=\"social-twitter\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-background/80 hover:text-primary transition-colors\"\n                data-testid=\"social-facebook\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z\"/>\n                </svg>\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-background/80 hover:text-primary transition-colors\"\n                data-testid=\"social-pinterest\"\n              >\n                <svg className=\"w-6 h-6\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12.017 0C5.396 0 .029 5.367.029 11.987c0 5.079 3.158 9.417 7.618 11.174-.105-.949-.199-2.403.041-3.439.219-.937 1.406-5.957 1.406-5.957s-.359-.72-.359-1.781c0-1.663.967-2.911 2.168-2.911 1.024 0 1.518.769 1.518 1.688 0 1.029-.653 2.567-.992 3.992-.285 1.193.6 2.165 1.775 2.165 2.128 0 3.768-2.245 3.768-5.487 0-2.861-2.063-4.869-5.008-4.869-3.41 0-5.409 2.562-5.409 5.199 0 1.033.394 2.143.889 2.741.099.12.112.225.083.345-.09.375-.293 1.199-.334 1.363-.053.225-.172.271-.402.165-1.495-.69-2.433-2.878-2.433-4.646 0-3.776 2.748-7.252 7.92-7.252 4.158 0 7.392 2.967 7.392 6.923 0 4.135-2.607 7.462-6.233 7.462-1.214 0-2.357-.629-2.74-1.378l-.748 2.853c-.271 1.043-1.002 2.35-1.492 3.146C9.57 23.812 10.763 24.009 12.017 24c6.624 0 11.99-5.367 11.99-11.988C24.007 5.367 18.641.001 12.017.001z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-background/20 mt-8 pt-8 text-center text-background/60\">\n          <p>&copy; 2024 Island Properties. All rights reserved. | Privacy Policy | Terms of Service</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":5117},"client/src/components/header.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\nexport default function Header() {\n  const [location] = useLocation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrolled = window.scrollY;\n      setIsScrolled(scrolled > 100);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const navigation = [\n    { name: 'Home', href: '/' },\n    { name: 'Listings', href: '/listings' },\n    { name: 'About', href: '/about' },\n    { name: 'Contact', href: '/contact' },\n  ];\n\n  return (\n    <header className={`sticky-header fixed top-0 left-0 right-0 z-50 py-1 transition-all duration-300 ${\n      isScrolled ? 'bg-white/98 shadow-lg' : 'bg-white/95'\n    }`}>\n      <div className=\"container mx-auto px-6 flex items-center justify-between\">\n        <Link href=\"/\" className=\"flex items-center -my-1 py-1\">\n          <img \n            src=\"https://i.imgur.com/42h36DK.png\" \n            alt=\"Island Properties Logo\" \n            className=\"h-14 w-auto\" \n          />\n        </Link>\n        \n        <nav className=\"hidden md:flex items-center space-x-8\">\n          {navigation.map((item) => (\n            <Link\n              key={item.name}\n              href={item.href}\n              className={`transition-colors font-medium ${\n                location === item.href \n                  ? 'text-primary' \n                  : 'text-foreground hover:text-primary'\n              }`}\n              data-testid={`nav-${item.name.toLowerCase()}`}\n            >\n              {item.name}\n            </Link>\n          ))}\n        </nav>\n        \n        <button\n          className=\"md:hidden p-2 text-foreground hover:text-primary transition-colors\"\n          onClick={() => setIsMenuOpen(!isMenuOpen)}\n          data-testid=\"mobile-menu-toggle\"\n        >\n          {isMenuOpen ? <X className=\"w-6 h-6\" /> : <Menu className=\"w-6 h-6\" />}\n        </button>\n\n        {/* Mobile menu */}\n        {isMenuOpen && (\n          <div className=\"absolute top-full left-0 right-0 bg-white shadow-lg md:hidden\">\n            <nav className=\"py-4 px-6 space-y-4\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`block transition-colors font-medium ${\n                    location === item.href \n                      ? 'text-primary' \n                      : 'text-foreground hover:text-primary'\n                  }`}\n                  onClick={() => setIsMenuOpen(false)}\n                  data-testid={`mobile-nav-${item.name.toLowerCase()}`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </nav>\n          </div>\n        )}\n      </div>\n    </header>\n  );\n}\n","size_bytes":3008},"client/src/components/property-card.tsx":{"content":"import { Link } from \"wouter\";\nimport { Property } from \"@shared/schema\";\nimport VideoModal from \"@/components/video-modal\";\n\ninterface PropertyCardProps {\n  property: Property;\n  className?: string;\n}\n\nexport default function PropertyCard({ property, className = \"\" }: PropertyCardProps) {\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const primaryImage = Array.isArray(property.images) && property.images.length > 0 \n    ? property.images[0] \n    : 'https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600';\n\n  return (\n    <Link href={`/property/${property.id}`}>\n      <div className={`property-card bg-card rounded-lg overflow-hidden shadow-lg cursor-pointer ${className}`}>\n        <img \n          src={primaryImage} \n          alt={property.title}\n          className=\"w-full h-64 object-cover\"\n          data-testid={`property-image-${property.id}`}\n        />\n        <div className=\"p-6\">\n          <h3 \n            className=\"text-xl font-semibold mb-2\"\n            data-testid={`property-title-${property.id}`}\n          >\n            {property.title}\n          </h3>\n          <p \n            className=\"text-2xl font-bold text-primary mb-2\"\n            data-testid={`property-price-${property.id}`}\n          >\n            {formatPrice(property.price)}\n          </p>\n          <p \n            className=\"text-muted-foreground mb-4\"\n            data-testid={`property-location-${property.id}`}\n          >\n            {property.location}\n          </p>\n          \n          {(property.bedrooms || property.bathrooms || property.squareFeet) && (\n            <div className=\"flex space-x-4 text-sm text-muted-foreground\">\n              {property.bedrooms && (\n                <span data-testid={`property-bedrooms-${property.id}`}>\n                  {property.bedrooms} beds\n                </span>\n              )}\n              {property.bathrooms && (\n                <span data-testid={`property-bathrooms-${property.id}`}>\n                  {property.bathrooms} baths\n                </span>\n              )}\n              {property.squareFeet && (\n                <span data-testid={`property-sqft-${property.id}`}>\n                  {property.squareFeet.toLocaleString()} sq ft\n                </span>\n              )}\n            </div>\n          )}\n\n          {/* Watch Video Button */}\n          {property.videoUrl && (\n            <div className=\"mt-4\" onClick={(e) => e.preventDefault()}>\n              <VideoModal videoUrl={property.videoUrl} title={`${property.title} - Video Tour`} />\n            </div>\n          )}\n        </div>\n      </div>\n    </Link>\n  );\n}\n","size_bytes":2826},"client/src/components/testimonial-card.tsx":{"content":"import { Testimonial } from \"@shared/schema\";\n\ninterface TestimonialCardProps {\n  testimonial: Testimonial;\n  className?: string;\n}\n\nexport default function TestimonialCard({ testimonial, className = \"\" }: TestimonialCardProps) {\n  const renderStars = (rating: number) => {\n    return '★'.repeat(rating);\n  };\n\n  return (\n    <div className={`bg-card p-6 rounded-lg shadow-lg ${className}`}>\n      <div className=\"flex items-center mb-4\">\n        <img \n          src={testimonial.avatar} \n          alt={`${testimonial.name} testimonial`}\n          className=\"w-12 h-12 rounded-full mr-4\"\n          data-testid={`testimonial-avatar-${testimonial.id}`}\n        />\n        <div>\n          <h4 \n            className=\"font-semibold\"\n            data-testid={`testimonial-name-${testimonial.id}`}\n          >\n            {testimonial.name}\n          </h4>\n          <p \n            className=\"text-sm text-muted-foreground\"\n            data-testid={`testimonial-title-${testimonial.id}`}\n          >\n            {testimonial.title}\n          </p>\n        </div>\n      </div>\n      <p \n        className=\"text-muted-foreground italic\"\n        data-testid={`testimonial-quote-${testimonial.id}`}\n      >\n        \"{testimonial.quote}\"\n      </p>\n      <div \n        className=\"flex text-primary text-sm mt-4\"\n        data-testid={`testimonial-rating-${testimonial.id}`}\n      >\n        <span>{renderStars(testimonial.rating || 5)}</span>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1464},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function About() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">About Island Properties</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Your trusted partner in real estate since 2005\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Company Story */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n              <div>\n                <h2 className=\"text-4xl font-bold text-foreground mb-6\">Our Story</h2>\n                <div className=\"space-y-4 text-muted-foreground\">\n                  <p>\n                    Founded in 2005, Island Properties has been serving the island community for nearly two decades. \n                    What started as a small local agency has grown into the region's most trusted real estate company, \n                    specializing in luxury homes, beachfront properties, and investment opportunities.\n                  </p>\n                  <p>\n                    Our deep understanding of the local market, combined with our commitment to exceptional service, \n                    has helped thousands of clients find their perfect properties. Whether you're looking for a \n                    family home, a commercial investment, or a piece of paradise by the sea, we have the expertise \n                    to guide you through every step of the process.\n                  </p>\n                </div>\n              </div>\n              <div>\n                <img \n                  src=\"https://images.unsplash.com/photo-1560472354-b33ff0c44a43?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600\" \n                  alt=\"Island Properties office building\"\n                  className=\"rounded-lg shadow-lg w-full h-96 object-cover\"\n                />\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Values Section */}\n        <section className=\"py-20 bg-muted\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl font-bold text-foreground mb-4\">Our Values</h2>\n              <p className=\"text-muted-foreground\">The principles that guide everything we do</p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\"></path>\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Integrity</h3>\n                <p className=\"text-muted-foreground\">\n                  We conduct our business with the highest ethical standards and complete transparency.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\"></path>\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Service Excellence</h3>\n                <p className=\"text-muted-foreground\">\n                  Our clients' satisfaction is our top priority, and we go above and beyond to exceed expectations.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"bg-primary rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                  <svg className=\"w-8 h-8 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4\"></path>\n                  </svg>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2\">Local Expertise</h3>\n                <p className=\"text-muted-foreground\">\n                  With deep roots in the community, we know the island market like no one else.\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Team Section */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center mb-16\">\n              <h2 className=\"text-4xl font-bold text-foreground mb-4\">Meet Our Team</h2>\n              <p className=\"text-muted-foreground\">Experienced professionals dedicated to your success</p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-8\">\n              <div className=\"text-center\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\" \n                  alt=\"John Martinez, CEO\"\n                  className=\"w-48 h-48 rounded-full mx-auto mb-4 object-cover\"\n                />\n                <h3 className=\"text-xl font-semibold mb-1\">John Martinez</h3>\n                <p className=\"text-primary font-medium mb-2\">CEO & Founder</p>\n                <p className=\"text-muted-foreground text-sm\">\n                  With over 25 years of experience, John founded Island Properties with a vision to transform real estate on the island.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1580489944761-15a19d654956?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\" \n                  alt=\"Sarah Chen, Sales Director\"\n                  className=\"w-48 h-48 rounded-full mx-auto mb-4 object-cover\"\n                />\n                <h3 className=\"text-xl font-semibold mb-1\">Sarah Chen</h3>\n                <p className=\"text-primary font-medium mb-2\">Sales Director</p>\n                <p className=\"text-muted-foreground text-sm\">\n                  Sarah leads our sales team with expertise in luxury properties and a track record of exceptional client service.\n                </p>\n              </div>\n              \n              <div className=\"text-center\">\n                <img \n                  src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&auto=format&fit=crop&w=300&h=300\" \n                  alt=\"Michael Torres, Commercial Specialist\"\n                  className=\"w-48 h-48 rounded-full mx-auto mb-4 object-cover\"\n                />\n                <h3 className=\"text-xl font-semibold mb-1\">Michael Torres</h3>\n                <p className=\"text-primary font-medium mb-2\">Commercial Specialist</p>\n                <p className=\"text-muted-foreground text-sm\">\n                  Michael specializes in commercial real estate and has helped numerous businesses find their perfect locations.\n                </p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* CTA Section */}\n        <section className=\"py-20 bg-secondary\">\n          <div className=\"container mx-auto px-6 text-center\">\n            <h2 className=\"text-4xl font-bold text-secondary-foreground mb-4\">Ready to Work With Us?</h2>\n            <p className=\"text-secondary-foreground/80 mb-8\">\n              Let our experienced team help you find your perfect property today.\n            </p>\n            <Link href=\"/contact\">\n              <Button \n                className=\"btn-primary text-primary-foreground px-8 py-3 font-semibold\"\n                data-testid=\"contact-cta-button\"\n              >\n                Get Started\n              </Button>\n            </Link>\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9038},"client/src/pages/agriculture.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport { Property } from \"@shared/schema\";\n\nexport default function Agriculture() {\n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/category/agriculture\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading properties...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Agricultural Properties</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Fertile farmland and agricultural investment opportunities\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Properties Grid */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            {properties.length === 0 ? (\n              <div className=\"text-center py-20\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-4\">No agricultural properties available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new listings.</p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {properties.map((property) => (\n                  <PropertyCard key={property.id} property={property} />\n                ))}\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2260},"client/src/pages/beach.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport { Property } from \"@shared/schema\";\n\nexport default function Beach() {\n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/category/beach\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading properties...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Beachfront Properties</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Luxury oceanfront homes and exclusive coastal living\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Properties Grid */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            {properties.length === 0 ? (\n              <div className=\"text-center py-20\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-4\">No beach properties available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new listings.</p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {properties.map((property) => (\n                  <PropertyCard key={property.id} property={property} />\n                ))}\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2233},"client/src/pages/commercial.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport { Property } from \"@shared/schema\";\n\nexport default function Commercial() {\n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/category/commercial\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading properties...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Commercial Properties</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Prime business locations and investment opportunities\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Properties Grid */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            {properties.length === 0 ? (\n              <div className=\"text-center py-20\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-4\">No commercial properties available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new listings.</p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {properties.map((property) => (\n                  <PropertyCard key={property.id} property={property} />\n                ))}\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2249},"client/src/pages/condos.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport { Property } from \"@shared/schema\";\n\nexport default function Condos() {\n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/category/condos\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading properties...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Condominiums</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Modern living in the heart of the city\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Properties Grid */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            {properties.length === 0 ? (\n              <div className=\"text-center py-20\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-4\">No condos available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new listings.</p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {properties.map((property) => (\n                  <PropertyCard key={property.id} property={property} />\n                ))}\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2202},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Contact() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    toast({\n      title: \"Message Sent!\",\n      description: \"Thank you for your inquiry. We'll get back to you within 24 hours.\",\n    });\n\n    setIsSubmitting(false);\n    \n    // Reset form\n    const form = e.target as HTMLFormElement;\n    form.reset();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Contact Us</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Ready to find your dream property? Let's get started.\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Contact Content */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"grid lg:grid-cols-2 gap-12\">\n              {/* Contact Information */}\n              <div>\n                <h2 className=\"text-3xl font-bold text-foreground mb-8\">Get In Touch</h2>\n                \n                <div className=\"space-y-6\">\n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"bg-primary rounded-full p-3\">\n                      <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">Address</h3>\n                      <p className=\"text-muted-foreground\">123 Paradise Avenue<br />Island City, IC 12345</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"bg-primary rounded-full p-3\">\n                      <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"></path>\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">Phone</h3>\n                      <p className=\"text-muted-foreground\">(555) 123-4567</p>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-start space-x-4\">\n                    <div className=\"bg-primary rounded-full p-3\">\n                      <svg className=\"w-6 h-6 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"></path>\n                      </svg>\n                    </div>\n                    <div>\n                      <h3 className=\"font-semibold text-foreground\">Email</h3>\n                      <p className=\"text-muted-foreground\">info@islandproperties.com</p>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-12\">\n                  <h3 className=\"text-xl font-semibold text-foreground mb-4\">Business Hours</h3>\n                  <div className=\"space-y-2 text-muted-foreground\">\n                    <div className=\"flex justify-between\">\n                      <span>Monday - Friday</span>\n                      <span>9:00 AM - 6:00 PM</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Saturday</span>\n                      <span>10:00 AM - 4:00 PM</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>Sunday</span>\n                      <span>By Appointment Only</span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              {/* Contact Form */}\n              <div className=\"bg-card p-8 rounded-lg shadow-lg\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Send us a Message</h3>\n                <form onSubmit={handleSubmit} className=\"space-y-6\">\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-foreground mb-2\">\n                        First Name *\n                      </label>\n                      <Input\n                        id=\"firstName\"\n                        name=\"firstName\"\n                        required\n                        placeholder=\"John\"\n                        data-testid=\"input-first-name\"\n                      />\n                    </div>\n                    <div>\n                      <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-foreground mb-2\">\n                        Last Name *\n                      </label>\n                      <Input\n                        id=\"lastName\"\n                        name=\"lastName\"\n                        required\n                        placeholder=\"Doe\"\n                        data-testid=\"input-last-name\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label htmlFor=\"email\" className=\"block text-sm font-medium text-foreground mb-2\">\n                      Email Address *\n                    </label>\n                    <Input\n                      id=\"email\"\n                      name=\"email\"\n                      type=\"email\"\n                      required\n                      placeholder=\"john.doe@example.com\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label htmlFor=\"phone\" className=\"block text-sm font-medium text-foreground mb-2\">\n                      Phone Number\n                    </label>\n                    <Input\n                      id=\"phone\"\n                      name=\"phone\"\n                      type=\"tel\"\n                      placeholder=\"(555) 123-4567\"\n                      data-testid=\"input-phone\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <label htmlFor=\"interest\" className=\"block text-sm font-medium text-foreground mb-2\">\n                      I'm interested in...\n                    </label>\n                    <Select name=\"interest\">\n                      <SelectTrigger data-testid=\"select-interest\">\n                        <SelectValue placeholder=\"Select an option\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"buying\">Buying a Property</SelectItem>\n                        <SelectItem value=\"selling\">Selling a Property</SelectItem>\n                        <SelectItem value=\"investment\">Property Investment</SelectItem>\n                        <SelectItem value=\"commercial\">Commercial Properties</SelectItem>\n                        <SelectItem value=\"rental\">Rental Properties</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <label htmlFor=\"message\" className=\"block text-sm font-medium text-foreground mb-2\">\n                      Your Message *\n                    </label>\n                    <Textarea\n                      id=\"message\"\n                      name=\"message\"\n                      required\n                      rows={4}\n                      placeholder=\"Tell us about your property needs...\"\n                      data-testid=\"textarea-message\"\n                    />\n                  </div>\n                  \n                  <Button\n                    type=\"submit\"\n                    disabled={isSubmitting}\n                    className=\"btn-primary text-primary-foreground w-full py-3 font-semibold\"\n                    data-testid=\"button-submit\"\n                  >\n                    {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                  </Button>\n                </form>\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9833},"client/src/pages/home.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport TestimonialCard from \"@/components/testimonial-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Property, Testimonial } from \"@shared/schema\";\n\nexport default function Home() {\n  const { data: hotProperties = [] } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/hot\"],\n  });\n\n  const { data: featuredProperties = [] } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/featured\"],\n  });\n\n  const { data: testimonials = [] } = useQuery<Testimonial[]>({\n    queryKey: [\"/api/testimonials\"],\n  });\n\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"hero-bg min-h-screen flex items-center justify-center relative\">\n        <div className=\"fixed top-16 left-6 z-40\">\n          <Button\n            className=\"btn-primary text-primary-foreground px-6 py-3 font-semibold shadow-lg\"\n            data-testid=\"hero-brokers-button\"\n          >\n            Brokers\n          </Button>\n        </div>\n        \n        <div className=\"fixed top-16 right-6 z-40\">\n          <Link href=\"/listings\">\n            <Button\n              className=\"btn-primary text-primary-foreground px-6 py-3 font-semibold shadow-lg\"\n              data-testid=\"hero-listings-button\"\n            >\n              Listings\n            </Button>\n          </Link>\n        </div>\n        \n        <div className=\"text-center text-white\">\n          {/* Hero content intentionally minimal per requirements */}\n        </div>\n      </section>\n\n      {/* Hot Listings Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-4\">Hot Listings</h2>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-8 mb-12\">\n            {hotProperties.slice(0, 2).map((property) => (\n              <PropertyCard key={property.id} property={property} />\n            ))}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              className=\"btn-primary text-primary-foreground px-8 py-3 font-semibold\"\n              data-testid=\"see-more-hot-button\"\n            >\n              See More Hot Listings\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Properties Section */}\n      <section className=\"py-20 bg-muted\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-4\">Featured Properties</h2>\n          </div>\n          \n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-6 mb-12\">\n            {featuredProperties.slice(0, 4).map((property) => (\n              <PropertyCard \n                key={property.id} \n                property={property} \n                className=\"h-auto\"\n              />\n            ))}\n          </div>\n          \n          <div className=\"text-center\">\n            <Button\n              className=\"btn-primary text-primary-foreground px-8 py-3 font-semibold\"\n              data-testid=\"see-more-featured-button\"\n            >\n              See More Featured\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* See All Listings Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-6 text-center\">\n          <Link href=\"/listings\">\n            <Button\n              className=\"btn-primary text-primary-foreground px-12 py-4 font-bold text-xl\"\n              data-testid=\"see-all-listings-button\"\n            >\n              See All Listings\n            </Button>\n          </Link>\n        </div>\n      </section>\n\n\n      {/* Testimonials Section */}\n      <section className=\"py-20 bg-background\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-foreground mb-4\">What Our Clients Say</h2>\n          </div>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {testimonials.slice(0, 3).map((testimonial) => (\n              <TestimonialCard key={testimonial.id} testimonial={testimonial} />\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Contact Section */}\n      <section className=\"py-20 bg-secondary\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-secondary-foreground mb-4\">Get In Touch</h2>\n            <p className=\"text-secondary-foreground/80\">Ready to find your dream property? Contact us today.</p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-2 gap-12 items-start\">\n            <div className=\"text-secondary-foreground\">\n              <h3 className=\"text-2xl font-semibold mb-6\">Contact Information</h3>\n              \n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-4\">\n                  <svg className=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z\"></path>\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M15 11a3 3 0 11-6 0 3 3 0 016 0z\"></path>\n                  </svg>\n                  <span>123 Paradise Avenue, Island City, IC 12345</span>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <svg className=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z\"></path>\n                  </svg>\n                  <span>(555) 123-4567</span>\n                </div>\n                \n                <div className=\"flex items-center space-x-4\">\n                  <svg className=\"w-6 h-6 text-primary\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z\"></path>\n                  </svg>\n                  <span>info@islandproperties.com</span>\n                </div>\n              </div>\n              \n              <div className=\"mt-8\">\n                <h4 className=\"text-lg font-semibold mb-4\">Business Hours</h4>\n                <div className=\"space-y-2 text-secondary-foreground/80\">\n                  <p>Monday - Friday: 9:00 AM - 6:00 PM</p>\n                  <p>Saturday: 10:00 AM - 4:00 PM</p>\n                  <p>Sunday: By Appointment Only</p>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-background p-8 rounded-lg\">\n              <h3 className=\"text-2xl font-semibold text-foreground mb-6\">Send us a Message</h3>\n              <Link href=\"/contact\">\n                <Button className=\"btn-primary text-primary-foreground px-8 py-3 font-semibold w-full\">\n                  Contact Form\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7896},"client/src/pages/houses.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport { Property } from \"@shared/schema\";\n\nexport default function Houses() {\n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/category/houses\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading properties...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Houses</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Discover beautiful homes perfect for your family\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Properties Grid */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            {properties.length === 0 ? (\n              <div className=\"text-center py-20\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-4\">No houses available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new listings.</p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {properties.map((property) => (\n                  <PropertyCard key={property.id} property={property} />\n                ))}\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2206},"client/src/pages/land.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport { Property } from \"@shared/schema\";\n\nexport default function Land() {\n  const { data: properties = [], isLoading } = useQuery<Property[]>({\n    queryKey: [\"/api/properties/category/land\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading properties...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Land</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Prime development opportunities and vacant land\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Properties Grid */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            {properties.length === 0 ? (\n              <div className=\"text-center py-20\">\n                <h3 className=\"text-2xl font-semibold text-foreground mb-4\">No land available</h3>\n                <p className=\"text-muted-foreground\">Check back later for new listings.</p>\n              </div>\n            ) : (\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {properties.map((property) => (\n                  <PropertyCard key={property.id} property={property} />\n                ))}\n              </div>\n            )}\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2197},"client/src/pages/listings.tsx":{"content":"import Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport CategoryCard from \"@/components/category-card\";\n\nexport default function Listings() {\n  const categories = [\n    {\n      title: \"Hot Listings\",\n      href: \"/beach\", // Using beach as hot listings example\n      image: \"https://images.unsplash.com/photo-1613490493576-7fde63acd811?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      title: \"Featured\",\n      href: \"/houses\", // Using houses as featured example\n      image: \"https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      title: \"Houses\",\n      href: \"/houses\",\n      image: \"https://images.unsplash.com/photo-1568605114967-8130f3a36994?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      title: \"Land\",\n      href: \"/land\",\n      image: \"https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      title: \"Condos\",\n      href: \"/condos\",\n      image: \"https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      title: \"Beach\",\n      href: \"/beach\",\n      image: \"https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      title: \"Commercial\",\n      href: \"/commercial\",\n      image: \"https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    },\n    {\n      title: \"Agriculture\",\n      href: \"/agriculture\",\n      image: \"https://images.unsplash.com/photo-1574323347407-f5e1ad6d020b?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Page Header */}\n        <section className=\"py-16 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"text-center\">\n              <h1 className=\"text-5xl font-bold text-foreground mb-4\">Browse Properties</h1>\n              <p className=\"text-xl text-muted-foreground\">\n                Discover your perfect property from our extensive collection\n              </p>\n            </div>\n          </div>\n        </section>\n\n        {/* Category Grid */}\n        <section className=\"py-20\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {categories.map((category) => (\n                <CategoryCard\n                  key={category.title}\n                  title={category.title}\n                  href={category.href}\n                  image={category.image}\n                />\n              ))}\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2913},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/property-detail.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { ChevronLeft, ChevronRight, MapPin, Home } from \"lucide-react\";\nimport Header from \"@/components/header\";\nimport Footer from \"@/components/footer\";\nimport PropertyCard from \"@/components/property-card\";\nimport VideoModal from \"@/components/video-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Property } from \"@shared/schema\";\n\nexport default function PropertyDetail() {\n  const { id } = useParams<{ id: string }>();\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  const { data: property, isLoading } = useQuery<Property>({\n    queryKey: [`/api/properties/${id}`],\n  });\n\n  const { data: similarProperties = [] } = useQuery<Property[]>({\n    queryKey: [`/api/properties/category/${property?.category}`],\n    enabled: !!property?.category,\n  });\n\n  const handleInquirySubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    // Simulate form submission\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    toast({\n      title: \"Inquiry Sent!\",\n      description: \"Your inquiry has been sent to the broker. They will contact you soon.\",\n    });\n\n    setIsSubmitting(false);\n    const form = e.target as HTMLFormElement;\n    form.reset();\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n            <p className=\"mt-4 text-muted-foreground\">Loading property details...</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  if (!property) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-[60vh]\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-semibold mb-4\">Property Not Found</h2>\n            <p className=\"text-muted-foreground mb-6\">The property you're looking for doesn't exist.</p>\n            <Link href=\"/listings\">\n              <Button>Browse All Properties</Button>\n            </Link>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      maximumFractionDigits: 0,\n    }).format(num);\n  };\n\n  const images = Array.isArray(property.images) ? property.images : [];\n  const features = Array.isArray(property.features) ? property.features : [];\n  const categoryData = property.categoryData as any || {};\n  const filteredSimilarProperties = similarProperties.filter(p => p.id !== property.id).slice(0, 4);\n\n  const nextImage = () => {\n    setCurrentImageIndex((prev) => (prev + 1) % images.length);\n  };\n\n  const prevImage = () => {\n    setCurrentImageIndex((prev) => (prev - 1 + images.length) % images.length);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header />\n      \n      <main className=\"pt-24\">\n        {/* Breadcrumb Navigation */}\n        <section className=\"py-4 bg-accent\">\n          <div className=\"container mx-auto px-6\">\n            <nav className=\"flex items-center space-x-2 text-sm\">\n              <Link href=\"/\" className=\"text-muted-foreground hover:text-primary\">\n                <Home className=\"w-4 h-4\" />\n              </Link>\n              <span className=\"text-muted-foreground\">/</span>\n              <Link href=\"/listings\" className=\"text-muted-foreground hover:text-primary\">\n                Listings\n              </Link>\n              <span className=\"text-muted-foreground\">/</span>\n              <Link href={`/${property.category}`} className=\"text-muted-foreground hover:text-primary capitalize\">\n                {property.category}\n              </Link>\n              <span className=\"text-muted-foreground\">/</span>\n              <span className=\"text-foreground font-medium\">{property.title}</span>\n            </nav>\n          </div>\n        </section>\n\n        {/* Hero Image Gallery */}\n        <section className=\"py-8\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"relative\">\n              <div className=\"aspect-video bg-muted rounded-lg overflow-hidden\">\n                {images.length > 0 && (\n                  <img \n                    src={images[currentImageIndex]} \n                    alt={`${property.title} - Image ${currentImageIndex + 1}`}\n                    className=\"w-full h-full object-cover\"\n                    data-testid={`property-image-${currentImageIndex}`}\n                  />\n                )}\n              </div>\n              \n              {images.length > 1 && (\n                <>\n                  <button\n                    onClick={prevImage}\n                    className=\"absolute left-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-foreground p-2 rounded-full shadow-lg\"\n                    data-testid=\"prev-image-button\"\n                  >\n                    <ChevronLeft className=\"w-6 h-6\" />\n                  </button>\n                  <button\n                    onClick={nextImage}\n                    className=\"absolute right-4 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-foreground p-2 rounded-full shadow-lg\"\n                    data-testid=\"next-image-button\"\n                  >\n                    <ChevronRight className=\"w-6 h-6\" />\n                  </button>\n                </>\n              )}\n              \n              {images.length > 1 && (\n                <div className=\"absolute bottom-4 left-1/2 -translate-x-1/2 flex space-x-2\">\n                  {images.map((_, index) => (\n                    <button\n                      key={index}\n                      onClick={() => setCurrentImageIndex(index)}\n                      className={`w-3 h-3 rounded-full ${\n                        index === currentImageIndex ? 'bg-white' : 'bg-white/50'\n                      }`}\n                      data-testid={`image-indicator-${index}`}\n                    />\n                  ))}\n                </div>\n              )}\n\n              {/* Watch Video Button */}\n              {property.videoUrl && (\n                <div className=\"absolute bottom-4 right-4\">\n                  <VideoModal videoUrl={property.videoUrl} title={`${property.title} - Property Video Tour`} />\n                </div>\n              )}\n            </div>\n          </div>\n        </section>\n\n        {/* Property Header */}\n        <section className=\"py-8\">\n          <div className=\"container mx-auto px-6\">\n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              <div className=\"lg:col-span-2\">\n                <h1 className=\"text-4xl font-bold text-foreground mb-4\" data-testid=\"property-title\">\n                  {property.title}\n                </h1>\n                <div className=\"flex items-center text-muted-foreground mb-6\">\n                  <MapPin className=\"w-5 h-5 mr-2\" />\n                  <span data-testid=\"property-location\">{property.location}</span>\n                </div>\n                \n                <div className=\"grid md:grid-cols-3 gap-4 mb-8\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <p className=\"text-sm text-muted-foreground\">Price</p>\n                      <p className=\"text-2xl font-bold text-primary\" data-testid=\"property-price\">\n                        {formatPrice(property.price)}\n                      </p>\n                      {property.pricePerSqm && (\n                        <p className=\"text-sm text-muted-foreground\">{property.pricePerSqm}/sqm</p>\n                      )}\n                    </CardContent>\n                  </Card>\n                  \n                  {property.bedrooms && (\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm text-muted-foreground\">Bedrooms</p>\n                        <p className=\"text-2xl font-bold\" data-testid=\"property-bedrooms\">{property.bedrooms}</p>\n                      </CardContent>\n                    </Card>\n                  )}\n                  \n                  {property.bathrooms && (\n                    <Card>\n                      <CardContent className=\"p-4\">\n                        <p className=\"text-sm text-muted-foreground\">Bathrooms</p>\n                        <p className=\"text-2xl font-bold\" data-testid=\"property-bathrooms\">{property.bathrooms}</p>\n                      </CardContent>\n                    </Card>\n                  )}\n                </div>\n\n                {/* Property Description */}\n                <Card className=\"mb-8\">\n                  <CardHeader>\n                    <CardTitle>Description</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground mb-4\" data-testid=\"property-description\">\n                      {property.description}\n                    </p>\n                    {property.detailedDescription && (\n                      <p className=\"text-muted-foreground\" data-testid=\"property-detailed-description\">\n                        {property.detailedDescription}\n                      </p>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {/* Features */}\n                {features.length > 0 && (\n                  <Card className=\"mb-8\">\n                    <CardHeader>\n                      <CardTitle>Features</CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {features.map((feature, index) => (\n                          <Badge key={index} variant=\"secondary\" data-testid={`feature-${index}`}>\n                            {feature}\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Category-Specific Details */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Property Details</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid md:grid-cols-2 gap-4\">\n                      {Object.entries(categoryData).map(([key, value]) => {\n                        if (Array.isArray(value)) {\n                          return (\n                            <div key={key}>\n                              <p className=\"font-medium capitalize\">{key.replace(/([A-Z])/g, ' $1')}</p>\n                              <p className=\"text-muted-foreground\">{value.join(', ')}</p>\n                            </div>\n                          );\n                        }\n                        return (\n                          <div key={key}>\n                            <p className=\"font-medium capitalize\">{key.replace(/([A-Z])/g, ' $1')}</p>\n                            <p className=\"text-muted-foreground\">{String(value)}</p>\n                          </div>\n                        );\n                      })}\n                      \n                      {property.squareFeet && (\n                        <div>\n                          <p className=\"font-medium\">Floor Area</p>\n                          <p className=\"text-muted-foreground\">{property.squareFeet} sqm</p>\n                        </div>\n                      )}\n                      \n                      {property.yearBuilt && (\n                        <div>\n                          <p className=\"font-medium\">Year Built</p>\n                          <p className=\"text-muted-foreground\">{property.yearBuilt}</p>\n                        </div>\n                      )}\n                      \n                      {property.titleType && (\n                        <div>\n                          <p className=\"font-medium\">Title Type</p>\n                          <p className=\"text-muted-foreground\">{property.titleType}</p>\n                        </div>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Contact Section */}\n              <div className=\"lg:col-span-1\">\n                <Card className=\"sticky top-8\">\n                  <CardHeader>\n                    <CardTitle>Contact Broker</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-center mb-6\">\n                      <h3 className=\"font-semibold text-lg\" data-testid=\"broker-name\">{property.brokerName}</h3>\n                      <p className=\"text-muted-foreground\">Real Estate Broker</p>\n                    </div>\n                    \n                    {/* Inquiry Form */}\n                    <form onSubmit={handleInquirySubmit} className=\"space-y-4\">\n                      <Input\n                        placeholder=\"Your Name\"\n                        required\n                        data-testid=\"inquiry-name\"\n                      />\n                      <Input\n                        type=\"email\"\n                        placeholder=\"Your Email\"\n                        required\n                        data-testid=\"inquiry-email\"\n                      />\n                      <Input\n                        type=\"tel\"\n                        placeholder=\"Your Phone\"\n                        data-testid=\"inquiry-phone\"\n                      />\n                      <Textarea\n                        placeholder={`I'm interested in ${property.title}. Please send me more information.`}\n                        rows={3}\n                        required\n                        data-testid=\"inquiry-message\"\n                      />\n                      <Button\n                        type=\"submit\"\n                        disabled={isSubmitting}\n                        className=\"w-full btn-primary\"\n                        data-testid=\"inquiry-submit\"\n                      >\n                        {isSubmitting ? \"Sending...\" : \"Send Inquiry\"}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Similar Properties */}\n        {filteredSimilarProperties.length > 0 && (\n          <section className=\"py-20 bg-accent\">\n            <div className=\"container mx-auto px-6\">\n              <h2 className=\"text-3xl font-bold text-center mb-12\">Similar Properties</h2>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n                {filteredSimilarProperties.map((similarProperty) => (\n                  <PropertyCard key={similarProperty.id} property={similarProperty} />\n                ))}\n              </div>\n            </div>\n          </section>\n        )}\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":15618},"client/src/components/admin/admin-layout.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation, Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Home,\n  Mountain,\n  Building,\n  Waves,\n  Store,\n  Trees,\n  FileText,\n  MessageCircle,\n  Users,\n  Shield,\n  Settings,\n  LogOut,\n  Menu,\n  X,\n  BarChart3\n} from \"lucide-react\";\n\ninterface AdminLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AdminLayout({ children }: AdminLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/admin/dashboard\", icon: BarChart3 },\n    { \n      name: \"Listings\", \n      icon: Home, \n      children: [\n        { name: \"Houses\", href: \"/admin/listings/houses\", icon: Home },\n        { name: \"Land\", href: \"/admin/listings/land\", icon: Mountain },\n        { name: \"Condos\", href: \"/admin/listings/condos\", icon: Building },\n        { name: \"Beach\", href: \"/admin/listings/beach\", icon: Waves },\n        { name: \"Commercial\", href: \"/admin/listings/commercial\", icon: Store },\n        { name: \"Agriculture\", href: \"/admin/listings/agriculture\", icon: Trees },\n      ]\n    },\n    {\n      name: \"Content\",\n      icon: FileText,\n      children: [\n        { name: \"Blog Posts\", href: \"/admin/content/blog\", icon: FileText },\n        { name: \"FAQ\", href: \"/admin/content/faq\", icon: MessageCircle },\n        { name: \"Testimonials\", href: \"/admin/content/testimonials\", icon: MessageCircle },\n      ]\n    },\n    { name: \"User Management\", href: \"/admin/users\", icon: Users },\n    { name: \"Security Logs\", href: \"/admin/security\", icon: Shield },\n    { name: \"Settings\", href: \"/admin/settings\", icon: Settings },\n  ];\n\n  const handleLogout = async () => {\n    try {\n      const response = await fetch(\"/api/admin/logout\", {\n        method: \"POST\",\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Logged Out\",\n          description: \"You have been successfully logged out\",\n        });\n        setLocation(\"/admin/login\");\n      } else {\n        throw new Error(\"Logout failed\");\n      }\n    } catch (error) {\n      toast({\n        title: \"Logout Error\",\n        description: \"Unable to logout. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const isActive = (href: string) => location === href;\n\n  return (\n    <div className=\"flex h-screen bg-gray-100\">\n      {/* Mobile sidebar backdrop */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 z-40 bg-gray-600 bg-opacity-75 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div className={`\n        fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out lg:translate-x-0 lg:static lg:inset-0\n        ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}\n      `}>\n        <div className=\"flex items-center justify-between h-16 px-4 border-b\">\n          <div className=\"flex items-center space-x-2\">\n            <Shield className=\"w-8 h-8 text-primary\" />\n            <span className=\"text-xl font-bold\">Admin Panel</span>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"lg:hidden\"\n            onClick={() => setSidebarOpen(false)}\n          >\n            <X className=\"w-5 h-5\" />\n          </Button>\n        </div>\n\n        <nav className=\"flex-1 px-4 py-6 space-y-2 overflow-y-auto\">\n          {navigation.map((item) => (\n            <div key={item.name}>\n              {item.children ? (\n                <div className=\"space-y-1\">\n                  <div className=\"px-3 py-2 text-sm font-medium text-gray-600 uppercase tracking-wider\">\n                    <div className=\"flex items-center\">\n                      <item.icon className=\"w-4 h-4 mr-2\" />\n                      {item.name}\n                    </div>\n                  </div>\n                  {item.children.map((child) => (\n                    <Link key={child.href} href={child.href}>\n                      <Button\n                        variant={isActive(child.href) ? \"secondary\" : \"ghost\"}\n                        className=\"w-full justify-start pl-8\"\n                        data-testid={`nav-${child.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <child.icon className=\"w-4 h-4 mr-2\" />\n                        {child.name}\n                      </Button>\n                    </Link>\n                  ))}\n                </div>\n              ) : (\n                <Link href={item.href}>\n                  <Button\n                    variant={isActive(item.href) ? \"secondary\" : \"ghost\"}\n                    className=\"w-full justify-start\"\n                    data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <item.icon className=\"w-4 h-4 mr-2\" />\n                    {item.name}\n                  </Button>\n                </Link>\n              )}\n            </div>\n          ))}\n        </nav>\n\n        <div className=\"p-4 border-t\">\n          <Button \n            onClick={handleLogout}\n            variant=\"outline\" \n            className=\"w-full\"\n            data-testid=\"admin-logout-button\"\n          >\n            <LogOut className=\"w-4 h-4 mr-2\" />\n            Logout\n          </Button>\n        </div>\n      </div>\n\n      {/* Main content */}\n      <div className=\"flex-1 flex flex-col overflow-hidden lg:ml-0\">\n        {/* Mobile header */}\n        <div className=\"lg:hidden flex items-center justify-between h-16 px-4 bg-white shadow-sm border-b\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setSidebarOpen(true)}\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-lg font-semibold\">Island Properties Admin</h1>\n          <div className=\"w-10\" /> {/* Spacer for centering */}\n        </div>\n\n        {/* Page content */}\n        <main className=\"flex-1 overflow-auto bg-gray-50\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}","size_bytes":6222},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Home, \n  Mountain, \n  Building, \n  Waves, \n  Store, \n  Trees, \n  FileText, \n  MessageCircle, \n  Users, \n  Shield,\n  Activity,\n  Plus,\n  Eye\n} from \"lucide-react\";\n\ninterface DashboardStats {\n  totalProperties: number;\n  propertiesByCategory: {\n    houses: number;\n    land: number;\n    condos: number;\n    beach: number;\n    commercial: number;\n    agriculture: number;\n  };\n  recentActivity: {\n    id: string;\n    action: string;\n    timestamp: string;\n    user: string;\n  }[];\n}\n\nexport default function AdminDashboard() {\n  const { data: stats, isLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/admin/dashboard/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"animate-pulse space-y-6\">\n          <div className=\"h-8 bg-gray-200 rounded w-64\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <div key={i} className=\"h-32 bg-gray-200 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const categoryIcons = {\n    houses: Home,\n    land: Mountain,\n    condos: Building,\n    beach: Waves,\n    commercial: Store,\n    agriculture: Trees,\n  };\n\n  const categoryColors = {\n    houses: \"text-blue-600 bg-blue-100\",\n    land: \"text-green-600 bg-green-100\",\n    condos: \"text-purple-600 bg-purple-100\",\n    beach: \"text-cyan-600 bg-cyan-100\",\n    commercial: \"text-orange-600 bg-orange-100\",\n    agriculture: \"text-emerald-600 bg-emerald-100\",\n  };\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Admin Dashboard</h1>\n        <p className=\"text-gray-600\">Welcome to Island Properties Admin Panel</p>\n      </div>\n\n      {/* Overview Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-sm font-medium text-gray-600\">Total Properties</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-3xl font-bold text-gray-900\">{stats?.totalProperties || 0}</div>\n            <p className=\"text-sm text-gray-600\">Active listings</p>\n          </CardContent>\n        </Card>\n\n        {stats?.propertiesByCategory && Object.entries(stats.propertiesByCategory).map(([category, count]) => {\n          const Icon = categoryIcons[category as keyof typeof categoryIcons];\n          const colorClass = categoryColors[category as keyof typeof categoryColors];\n          \n          return (\n            <Card key={category}>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-sm font-medium text-gray-600 capitalize flex items-center\">\n                  <div className={`p-2 rounded-lg mr-3 ${colorClass}`}>\n                    <Icon className=\"w-4 h-4\" />\n                  </div>\n                  {category}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-3xl font-bold text-gray-900\">{count}</div>\n                <div className=\"flex space-x-2 mt-2\">\n                  <Button size=\"sm\" variant=\"outline\" data-testid={`view-${category}`}>\n                    <Eye className=\"w-3 h-3 mr-1\" />\n                    View\n                  </Button>\n                  <Button size=\"sm\" data-testid={`add-${category}`}>\n                    <Plus className=\"w-3 h-3 mr-1\" />\n                    Add\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <Button \n          className=\"h-24 flex flex-col space-y-2\" \n          variant=\"outline\"\n          data-testid=\"quick-add-property\"\n        >\n          <Plus className=\"w-6 h-6\" />\n          <span>Add Property</span>\n        </Button>\n        \n        <Button \n          className=\"h-24 flex flex-col space-y-2\" \n          variant=\"outline\"\n          data-testid=\"manage-blog\"\n        >\n          <FileText className=\"w-6 h-6\" />\n          <span>Manage Blog</span>\n        </Button>\n        \n        <Button \n          className=\"h-24 flex flex-col space-y-2\" \n          variant=\"outline\"\n          data-testid=\"manage-testimonials\"\n        >\n          <MessageCircle className=\"w-6 h-6\" />\n          <span>Testimonials</span>\n        </Button>\n        \n        <Button \n          className=\"h-24 flex flex-col space-y-2\" \n          variant=\"outline\"\n          data-testid=\"security-logs\"\n        >\n          <Shield className=\"w-6 h-6\" />\n          <span>Security Logs</span>\n        </Button>\n      </div>\n\n      {/* Recent Activity */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Activity className=\"w-5 h-5 mr-2\" />\n            Recent Activity\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {stats?.recentActivity?.length ? (\n            <div className=\"space-y-3\">\n              {stats.recentActivity.map((activity) => (\n                <div key={activity.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div>\n                    <p className=\"font-medium text-gray-900\">{activity.action}</p>\n                    <p className=\"text-sm text-gray-600\">by {activity.user}</p>\n                  </div>\n                  <div className=\"text-sm text-gray-500\">\n                    {new Date(activity.timestamp).toLocaleDateString()}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <p className=\"text-gray-600 text-center py-8\">No recent activity</p>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6132},"client/src/pages/admin/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Eye, EyeOff, Shield, AlertTriangle } from \"lucide-react\";\n\nexport default function AdminLogin() {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [rememberMe, setRememberMe] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"/api/admin/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email, password, rememberMe }),\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        toast({\n          title: \"Login Successful\",\n          description: `Welcome back, ${data.user.email}`,\n        });\n        setLocation(\"/admin/dashboard\");\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Login Failed\",\n          description: error.message || \"Invalid credentials\",\n          variant: \"destructive\",\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Connection Error\",\n        description: \"Unable to connect to server\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <Shield className=\"w-12 h-12 text-primary\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">Admin Login</CardTitle>\n          <p className=\"text-muted-foreground\">Island Properties Admin Panel</p>\n          \n          {/* Demo Environment Warning */}\n          <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3 mt-4\">\n            <div className=\"flex items-start space-x-2\">\n              <AlertTriangle className=\"w-4 h-4 text-amber-600 mt-0.5 flex-shrink-0\" />\n              <div className=\"text-left\">\n                <p className=\"text-sm font-semibold text-amber-800\">Demo Environment</p>\n                <p className=\"text-xs text-amber-700\">\n                  This is a demonstration system. Use provided demo credentials only.\n                </p>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleLogin} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"email\">Email Address</Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                placeholder=\"nubesmcgee@gmail.com\"\n                required\n                data-testid=\"admin-email-input\"\n              />\n            </div>\n\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <div className=\"relative\">\n                <Input\n                  id=\"password\"\n                  type={showPassword ? \"text\" : \"password\"}\n                  value={password}\n                  onChange={(e) => setPassword(e.target.value)}\n                  placeholder=\"Enter password\"\n                  required\n                  data-testid=\"admin-password-input\"\n                />\n                <Button\n                  type=\"button\"\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"absolute right-2 top-1/2 -translate-y-1/2 h-auto p-1\"\n                  onClick={() => setShowPassword(!showPassword)}\n                  data-testid=\"toggle-password-visibility\"\n                >\n                  {showPassword ? (\n                    <EyeOff className=\"w-4 h-4\" />\n                  ) : (\n                    <Eye className=\"w-4 h-4\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"remember\"\n                checked={rememberMe}\n                onCheckedChange={(checked) => setRememberMe(!!checked)}\n                data-testid=\"remember-me-checkbox\"\n              />\n              <Label htmlFor=\"remember\" className=\"text-sm\">\n                Remember me for 7 days\n              </Label>\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={isLoading}\n              data-testid=\"admin-login-button\"\n            >\n              {isLoading ? \"Logging in...\" : \"Login\"}\n            </Button>\n          </form>\n\n          {/* Demo Credentials Helper */}\n          <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n            <p className=\"text-sm font-semibold text-blue-800 mb-2\">Demo Credentials:</p>\n            <div className=\"text-xs text-blue-700 space-y-1\">\n              <div>Email: <code className=\"bg-blue-100 px-1 rounded\">nubesmcgee@gmail.com</code></div>\n              <div>Password: <code className=\"bg-blue-100 px-1 rounded\">.TwentyTwo22.</code></div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":5874},"client/src/pages/admin/components/property-edit-dialog.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { X, Upload, Plus } from \"lucide-react\";\nimport type { Property } from \"@shared/schema\";\n\ninterface PropertyEditDialogProps {\n  property: Property | null;\n  category: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onSuccess: () => void;\n}\n\n// Simplified form schema\nconst propertyFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  pricePerSqm: z.string().optional(),\n  location: z.string().min(1, \"Location is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  detailedDescription: z.string().optional(),\n  brokerName: z.string().min(1, \"Broker name is required\"),\n  brokerPhone: z.string().min(1, \"Broker phone is required\"),\n  brokerEmail: z.string().email(\"Valid email is required\"),\n  titleType: z.string().default(\"Clean Title\"),\n  images: z.array(z.string()).min(1, \"At least one image is required\"),\n  videoUrl: z.string().optional(),\n  isFeatured: z.boolean().default(false),\n  isHot: z.boolean().default(false),\n  bedrooms: z.string().optional(),\n  bathrooms: z.string().optional(),\n  squareFeet: z.string().optional(),\n  lotSize: z.string().optional(),\n  yearBuilt: z.string().optional(),\n  propertyType: z.string().default(\"Single Family Home\"),\n  // Land specific\n  totalAreaSqm: z.string().optional(),\n  totalAreaHectares: z.string().optional(),\n  landClassification: z.string().optional(),\n  topography: z.string().optional(),\n});\n\ntype PropertyFormData = z.infer<typeof propertyFormSchema>;\n\nexport default function PropertyEditDialog({ \n  property, \n  category, \n  open, \n  onOpenChange, \n  onSuccess \n}: PropertyEditDialogProps) {\n  const [dragActive, setDragActive] = useState(false);\n  const [imageUploadUrl, setImageUploadUrl] = useState(\"\");\n  const { toast } = useToast();\n\n  const form = useForm<PropertyFormData>({\n    resolver: zodResolver(propertyFormSchema),\n    defaultValues: {\n      title: \"\",\n      price: \"\",\n      pricePerSqm: \"\",\n      location: \"\",\n      description: \"\",\n      detailedDescription: \"\",\n      brokerName: \"\",\n      brokerPhone: \"\",\n      brokerEmail: \"\",\n      titleType: \"Clean Title\",\n      images: [],\n      videoUrl: \"\",\n      isFeatured: false,\n      isHot: false,\n      bedrooms: \"\",\n      bathrooms: \"\",\n      squareFeet: \"\",\n      lotSize: \"\",\n      yearBuilt: \"\",\n      propertyType: \"Single Family Home\",\n      totalAreaSqm: \"\",\n      totalAreaHectares: \"\",\n      landClassification: \"\",\n      topography: \"\",\n    },\n  });\n\n  const mutation = useMutation({\n    mutationFn: (data: PropertyFormData) => {\n      const payload = {\n        ...data,\n        category,\n        // Convert string fields to numbers where needed\n        bedrooms: data.bedrooms ? parseInt(data.bedrooms) : undefined,\n        bathrooms: data.bathrooms ? parseInt(data.bathrooms) : undefined,\n        squareFeet: data.squareFeet ? parseInt(data.squareFeet) : undefined,\n        yearBuilt: data.yearBuilt ? parseInt(data.yearBuilt) : undefined,\n        categoryData: category === \"land\" ? {\n          totalAreaSqm: data.totalAreaSqm ? parseInt(data.totalAreaSqm) : undefined,\n          totalAreaHectares: data.totalAreaHectares ? parseFloat(data.totalAreaHectares) : undefined,\n          landClassification: data.landClassification || undefined,\n          topography: data.topography || undefined,\n        } : {},\n        contactInfo: {\n          phone: data.brokerPhone,\n          email: data.brokerEmail,\n        },\n      };\n      \n      if (property) {\n        return apiRequest(`/api/admin/properties/${property.id}`, \"PUT\", payload);\n      } else {\n        return apiRequest(\"/api/admin/properties\", \"POST\", payload);\n      }\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: `Property ${property ? \"updated\" : \"created\"} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || `Failed to ${property ? \"update\" : \"create\"} property`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Load property data when editing\n  useEffect(() => {\n    if (property && open) {\n      const categoryData = property.categoryData || {};\n      form.reset({\n        title: property.title || \"\",\n        price: property.price || \"\",\n        pricePerSqm: property.pricePerSqm || \"\",\n        location: property.location || \"\",\n        description: property.description || \"\",\n        detailedDescription: property.detailedDescription || \"\",\n        brokerName: property.brokerName || \"\",\n        brokerPhone: property.brokerPhone || \"\",\n        brokerEmail: property.brokerEmail || \"\",\n        titleType: property.titleType || \"Clean Title\",\n        images: Array.isArray(property.images) ? property.images : [],\n        videoUrl: property.videoUrl || \"\",\n        isFeatured: property.isFeatured || false,\n        isHot: property.isHot || false,\n        bedrooms: property.bedrooms?.toString() || \"\",\n        bathrooms: property.bathrooms?.toString() || \"\",\n        squareFeet: property.squareFeet?.toString() || \"\",\n        lotSize: property.lotSize || \"\",\n        yearBuilt: property.yearBuilt?.toString() || \"\",\n        propertyType: property.propertyType || \"Single Family Home\",\n        totalAreaSqm: (categoryData as any)?.totalAreaSqm?.toString() || \"\",\n        totalAreaHectares: (categoryData as any)?.totalAreaHectares?.toString() || \"\",\n        landClassification: (categoryData as any)?.landClassification || \"\",\n        topography: (categoryData as any)?.topography || \"\",\n      });\n    } else if (!property && open) {\n      form.reset({\n        title: \"\",\n        price: \"\",\n        pricePerSqm: \"\",\n        location: \"\",\n        description: \"\",\n        detailedDescription: \"\",\n        brokerName: \"\",\n        brokerPhone: \"\",\n        brokerEmail: \"\",\n        titleType: \"Clean Title\",\n        images: [],\n        videoUrl: \"\",\n        isFeatured: false,\n        isHot: false,\n        bedrooms: \"\",\n        bathrooms: \"\",\n        squareFeet: \"\",\n        lotSize: \"\",\n        yearBuilt: new Date().getFullYear().toString(),\n        propertyType: \"Single Family Home\",\n        totalAreaSqm: \"\",\n        totalAreaHectares: \"\",\n        landClassification: \"\",\n        topography: \"\",\n      });\n    }\n  }, [property, open, form]);\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragActive(false);\n    // In a real implementation, you would upload the files here\n    const files = Array.from(e.dataTransfer.files);\n    const newImages = files.map((file, index) => `https://images.unsplash.com/photo-1560448204-e02f11c3d0e2?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600&${index}`);\n    const currentImages = form.getValues(\"images\");\n    form.setValue(\"images\", [...currentImages, ...newImages]);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setDragActive(true);\n  };\n\n  const handleDragLeave = () => {\n    setDragActive(false);\n  };\n\n  const addImageUrl = () => {\n    if (imageUploadUrl.trim()) {\n      const currentImages = form.getValues(\"images\");\n      form.setValue(\"images\", [...currentImages, imageUploadUrl.trim()]);\n      setImageUploadUrl(\"\");\n    }\n  };\n\n  const removeImage = (index: number) => {\n    const currentImages = form.getValues(\"images\");\n    form.setValue(\"images\", currentImages.filter((_, i) => i !== index));\n  };\n\n  const onSubmit = (data: PropertyFormData) => {\n    mutation.mutate(data);\n  };\n\n  const renderCategorySpecificFields = () => {\n    switch (category) {\n      case \"houses\":\n      case \"condos\":\n      case \"beach\":\n      case \"commercial\":\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"bedrooms\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Bedrooms</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"3\"\n                      {...field}\n                      data-testid=\"bedrooms-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"bathrooms\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Bathrooms</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"2\"\n                      {...field}\n                      data-testid=\"bathrooms-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"squareFeet\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Square Feet</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"1200\"\n                      {...field}\n                      data-testid=\"square-feet-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"yearBuilt\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Year Built</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"2020\"\n                      {...field}\n                      data-testid=\"year-built-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"propertyType\"\n              render={({ field }) => (\n                <FormItem className=\"col-span-2\">\n                  <FormLabel>Property Type</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"property-type-select\">\n                        <SelectValue placeholder=\"Select property type\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"Single Family Home\">Single Family Home</SelectItem>\n                      <SelectItem value=\"Townhouse\">Townhouse</SelectItem>\n                      <SelectItem value=\"Villa\">Villa</SelectItem>\n                      <SelectItem value=\"Duplex\">Duplex</SelectItem>\n                      <SelectItem value=\"Condo\">Condo</SelectItem>\n                      <SelectItem value=\"Office\">Office</SelectItem>\n                      <SelectItem value=\"Retail\">Retail</SelectItem>\n                      <SelectItem value=\"Warehouse\">Warehouse</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        );\n      case \"land\":\n      case \"agriculture\":\n        return (\n          <div className=\"grid grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"totalAreaSqm\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Total Area (sqm)</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"1000\"\n                      {...field}\n                      data-testid=\"total-area-sqm-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"totalAreaHectares\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Total Area (hectares)</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"0.1\"\n                      {...field}\n                      data-testid=\"total-area-hectares-input\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"landClassification\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Land Classification</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"land-classification-select\">\n                        <SelectValue placeholder=\"Select classification\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"Residential\">Residential</SelectItem>\n                      <SelectItem value=\"Commercial\">Commercial</SelectItem>\n                      <SelectItem value=\"Agricultural\">Agricultural</SelectItem>\n                      <SelectItem value=\"Industrial\">Industrial</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormField\n              control={form.control}\n              name=\"topography\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Topography</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"topography-select\">\n                        <SelectValue placeholder=\"Select topography\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"Flat\">Flat</SelectItem>\n                      <SelectItem value=\"Gently Sloping\">Gently Sloping</SelectItem>\n                      <SelectItem value=\"Steep\">Steep</SelectItem>\n                      <SelectItem value=\"Rolling\">Rolling</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {property ? `Edit ${category} Property` : `Add New ${category} Property`}\n          </DialogTitle>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem className=\"col-span-2\">\n                    <FormLabel>Title *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"title-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price *</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"50000000\" data-testid=\"price-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"pricePerSqm\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price per SqM</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"₱10,000\" data-testid=\"price-per-sqm-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem className=\"col-span-2\">\n                    <FormLabel>Location *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"location-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Category-specific fields */}\n            {renderCategorySpecificFields()}\n\n            {/* Description */}\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Short Description *</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={3} data-testid=\"description-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"detailedDescription\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Detailed Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={5} data-testid=\"detailed-description-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Images */}\n            <div className=\"space-y-4\">\n              <FormLabel>Property Images *</FormLabel>\n              \n              {/* Drag and Drop Area */}\n              <div\n                className={`border-2 border-dashed rounded-lg p-6 text-center ${\n                  dragActive ? \"border-blue-400 bg-blue-50\" : \"border-gray-300\"\n                }`}\n                onDrop={handleDrop}\n                onDragOver={handleDragOver}\n                onDragLeave={handleDragLeave}\n              >\n                <Upload className=\"w-8 h-8 mx-auto mb-2 text-gray-400\" />\n                <p className=\"text-gray-600\">Drag and drop images here, or click to browse</p>\n                <p className=\"text-xs text-gray-500 mt-1\">Supports JPG, PNG, WebP</p>\n              </div>\n\n              {/* URL Input */}\n              <div className=\"flex gap-2\">\n                <Input\n                  placeholder=\"Or paste image URL...\"\n                  value={imageUploadUrl}\n                  onChange={(e) => setImageUploadUrl(e.target.value)}\n                  data-testid=\"image-url-input\"\n                />\n                <Button type=\"button\" onClick={addImageUrl} data-testid=\"add-image-url\">\n                  <Plus className=\"w-4 h-4\" />\n                </Button>\n              </div>\n\n              {/* Image Preview */}\n              <div className=\"grid grid-cols-3 gap-4\">\n                {form.watch(\"images\").map((url, index) => (\n                  <div key={index} className=\"relative group\">\n                    <img\n                      src={url}\n                      alt={`Property ${index + 1}`}\n                      className=\"w-full h-24 object-cover rounded-lg\"\n                    />\n                    <Button\n                      type=\"button\"\n                      size=\"sm\"\n                      variant=\"destructive\"\n                      className=\"absolute top-1 right-1 opacity-0 group-hover:opacity-100 p-1 h-6 w-6\"\n                      onClick={() => removeImage(index)}\n                      data-testid={`remove-image-${index}`}\n                    >\n                      <X className=\"w-3 h-3\" />\n                    </Button>\n                  </div>\n                ))}\n              </div>\n              {form.formState.errors.images && (\n                <p className=\"text-sm text-destructive\">{form.formState.errors.images.message}</p>\n              )}\n            </div>\n\n            {/* Video URL */}\n            <div className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"videoUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Property Video URL</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"https://www.youtube.com/watch?v=... or https://vimeo.com/...\"\n                        data-testid=\"video-url-input\" \n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              {form.watch(\"videoUrl\") && (\n                <p className=\"text-sm text-muted-foreground\">\n                  📹 A \"Watch Video\" button will appear on the property listing when this is saved.\n                </p>\n              )}\n            </div>\n\n            {/* Broker Information */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"brokerName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Broker Name *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"broker-name-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"brokerPhone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Broker Phone *</FormLabel>\n                    <FormControl>\n                      <Input {...field} data-testid=\"broker-phone-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"brokerEmail\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Broker Email *</FormLabel>\n                    <FormControl>\n                      <Input type=\"email\" {...field} data-testid=\"broker-email-input\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"titleType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Title Type</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"title-type-select\">\n                          <SelectValue placeholder=\"Select title type\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"Clean Title\">Clean Title</SelectItem>\n                        <SelectItem value=\"Torrens Title\">Torrens Title</SelectItem>\n                        <SelectItem value=\"Tax Declaration\">Tax Declaration</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Status Options */}\n            <div className=\"flex gap-6\">\n              <FormField\n                control={form.control}\n                name=\"isFeatured\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"featured-checkbox\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Featured Property</FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n              \n              <FormField\n                control={form.control}\n                name=\"isHot\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-start space-x-3 space-y-0\">\n                    <FormControl>\n                      <Checkbox\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"hot-checkbox\"\n                      />\n                    </FormControl>\n                    <div className=\"space-y-1 leading-none\">\n                      <FormLabel>Hot Listing</FormLabel>\n                    </div>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end gap-4 pt-4 border-t\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                onClick={() => onOpenChange(false)}\n                data-testid=\"cancel-button\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={mutation.isPending}\n                data-testid=\"save-button\"\n              >\n                {mutation.isPending ? \"Saving...\" : (property ? \"Update Property\" : \"Create Property\")}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":27759},"client/src/pages/admin/listings/agriculture.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Star,\n  TrendingUp,\n  TreePine\n} from \"lucide-react\";\nimport type { Property } from \"@shared/schema\";\nimport PropertyEditDialog from \"../components/property-edit-dialog\";\n\nexport default function AdminAgriculture() {\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: properties = [], isLoading, refetch } = useQuery<Property[]>({\n    queryKey: [\"/api/admin/properties\", \"agriculture\", search, statusFilter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      params.append('category', 'agriculture');\n      if (search) params.append('search', search);\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      return fetch(`/api/admin/properties?${params.toString()}`).then(r => r.json());\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/properties/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Agricultural property deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete agricultural property\", variant: \"destructive\" });\n    },\n  });\n\n  const bulkMutation = useMutation({\n    mutationFn: ({ action, propertyIds }: { action: string, propertyIds: string[] }) => \n      apiRequest(\"/api/admin/properties/bulk\", \"POST\", { action, propertyIds }),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Bulk operation completed\" });\n      setSelectedProperties([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Bulk operation failed\", variant: \"destructive\" });\n    },\n  });\n\n  const handleEdit = (property: Property) => {\n    setEditingProperty(property);\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this agricultural property?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    if (selectedProperties.length === 0) {\n      toast({ title: \"Warning\", description: \"No agricultural properties selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (action === \"delete\") {\n      if (!confirm(`Are you sure you want to delete ${selectedProperties.length} agricultural properties?`)) {\n        return;\n      }\n    }\n    \n    bulkMutation.mutate({ action, propertyIds: selectedProperties });\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    setSelectedProperties(checked ? properties.map(p => p.id) : []);\n  };\n\n  const handleSelectProperty = (id: string, checked: boolean) => {\n    setSelectedProperties(prev => \n      checked ? [...prev, id] : prev.filter(p => p !== id)\n    );\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);\n  };\n\n  const filteredProperties = properties.filter(property => {\n    const matchesSearch = property.title.toLowerCase().includes(search.toLowerCase()) ||\n                         property.location.toLowerCase().includes(search.toLowerCase());\n    \n    if (statusFilter === \"featured\") return matchesSearch && property.isFeatured;\n    if (statusFilter === \"hot\") return matchesSearch && property.isHot;\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <TreePine className=\"w-8 h-8 text-green-700\" />\n            <div>\n              <h1 className=\"text-3xl font-bold\">Agricultural Properties Management</h1>\n              <p className=\"text-gray-600\">Manage agricultural listings, edit details, and control visibility</p>\n            </div>\n          </div>\n          <Button \n            onClick={() => {\n              setEditingProperty(null);\n              setShowEditDialog(true);\n            }}\n            data-testid=\"add-agriculture-button\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Agricultural Property\n          </Button>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search agricultural properties by title or location...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-agriculture\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Properties</SelectItem>\n              <SelectItem value=\"featured\">Featured Only</SelectItem>\n              <SelectItem value=\"hot\">Hot Listings Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedProperties.length > 0 && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-green-800\">\n                {selectedProperties.length} agricultural properties selected\n              </span>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"feature\")}\n                  data-testid=\"bulk-feature\"\n                >\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  Feature\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"hot\")}\n                  data-testid=\"bulk-hot\"\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Mark Hot\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleBulkAction(\"delete\")}\n                  data-testid=\"bulk-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Properties Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Select All */}\n          <div className=\"flex items-center space-x-2 p-4 bg-gray-50 rounded-lg\">\n            <Checkbox\n              checked={selectedProperties.length === filteredProperties.length && filteredProperties.length > 0}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"select-all-agriculture\"\n            />\n            <label className=\"text-sm font-medium\">\n              Select All ({filteredProperties.length} agricultural properties)\n            </label>\n          </div>\n\n          {filteredProperties.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <TreePine className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No agricultural properties found</h3>\n              <p className=\"text-gray-600 mb-4\">No agricultural properties match your current filters.</p>\n              <Button onClick={() => { setSearch(\"\"); setStatusFilter(\"all\"); }}>\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProperties.map((property) => (\n                <Card key={property.id} className=\"overflow-hidden\">\n                  <div className=\"relative\">\n                    <img\n                      src={Array.isArray(property.images) && property.images.length > 0 \n                        ? property.images[0] \n                        : 'https://images.unsplash.com/photo-1500595046743-cd271d694d30?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'\n                      }\n                      alt={property.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <Checkbox\n                        checked={selectedProperties.includes(property.id)}\n                        onCheckedChange={(checked) => handleSelectProperty(property.id, !!checked)}\n                        className=\"bg-white\"\n                        data-testid={`select-agriculture-${property.id}`}\n                      />\n                    </div>\n                    <div className=\"absolute top-2 right-2 flex gap-1\">\n                      {property.isFeatured && (\n                        <Badge className=\"bg-yellow-500\">Featured</Badge>\n                      )}\n                      {property.isHot && (\n                        <Badge className=\"bg-red-500\">Hot</Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">{property.title}</CardTitle>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(property.price)}\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{property.location}</p>\n                    {property.pricePerSqm && (\n                      <p className=\"text-sm text-green-600\">{property.pricePerSqm} per sqm</p>\n                    )}\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-4\">\n                      {property.categoryData && (property.categoryData as any).totalAreaHectares && (\n                        <span>{(property.categoryData as any).totalAreaHectares} hectares</span>\n                      )}\n                      {property.categoryData && (property.categoryData as any).landClassification && (\n                        <span>{(property.categoryData as any).landClassification}</span>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                        onClick={() => handleEdit(property)}\n                        data-testid={`edit-agriculture-${property.id}`}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        data-testid={`view-agriculture-${property.id}`}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleDelete(property.id)}\n                        data-testid={`delete-agriculture-${property.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <PropertyEditDialog\n        property={editingProperty}\n        category=\"agriculture\"\n        open={showEditDialog}\n        onOpenChange={setShowEditDialog}\n        onSuccess={() => {\n          setShowEditDialog(false);\n          setEditingProperty(null);\n          refetch();\n        }}\n      />\n    </div>\n  );\n}","size_bytes":13807},"client/src/pages/admin/listings/beach.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Star,\n  TrendingUp,\n  Waves\n} from \"lucide-react\";\nimport type { Property } from \"@shared/schema\";\nimport PropertyEditDialog from \"../components/property-edit-dialog\";\n\nexport default function AdminBeach() {\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: properties = [], isLoading, refetch } = useQuery<Property[]>({\n    queryKey: [\"/api/admin/properties\", \"beach\", search, statusFilter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      params.append('category', 'beach');\n      if (search) params.append('search', search);\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      return fetch(`/api/admin/properties?${params.toString()}`).then(r => r.json());\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/properties/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Beach property deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete beach property\", variant: \"destructive\" });\n    },\n  });\n\n  const bulkMutation = useMutation({\n    mutationFn: ({ action, propertyIds }: { action: string, propertyIds: string[] }) => \n      apiRequest(\"/api/admin/properties/bulk\", \"POST\", { action, propertyIds }),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Bulk operation completed\" });\n      setSelectedProperties([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Bulk operation failed\", variant: \"destructive\" });\n    },\n  });\n\n  const handleEdit = (property: Property) => {\n    setEditingProperty(property);\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this beach property?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    if (selectedProperties.length === 0) {\n      toast({ title: \"Warning\", description: \"No beach properties selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (action === \"delete\") {\n      if (!confirm(`Are you sure you want to delete ${selectedProperties.length} beach properties?`)) {\n        return;\n      }\n    }\n    \n    bulkMutation.mutate({ action, propertyIds: selectedProperties });\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    setSelectedProperties(checked ? properties.map(p => p.id) : []);\n  };\n\n  const handleSelectProperty = (id: string, checked: boolean) => {\n    setSelectedProperties(prev => \n      checked ? [...prev, id] : prev.filter(p => p !== id)\n    );\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);\n  };\n\n  const filteredProperties = properties.filter(property => {\n    const matchesSearch = property.title.toLowerCase().includes(search.toLowerCase()) ||\n                         property.location.toLowerCase().includes(search.toLowerCase());\n    \n    if (statusFilter === \"featured\") return matchesSearch && property.isFeatured;\n    if (statusFilter === \"hot\") return matchesSearch && property.isHot;\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Waves className=\"w-8 h-8 text-cyan-600\" />\n            <div>\n              <h1 className=\"text-3xl font-bold\">Beach Properties Management</h1>\n              <p className=\"text-gray-600\">Manage beachfront listings, edit details, and control visibility</p>\n            </div>\n          </div>\n          <Button \n            onClick={() => {\n              setEditingProperty(null);\n              setShowEditDialog(true);\n            }}\n            data-testid=\"add-beach-button\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Beach Property\n          </Button>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search beach properties by title or location...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-beach\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Properties</SelectItem>\n              <SelectItem value=\"featured\">Featured Only</SelectItem>\n              <SelectItem value=\"hot\">Hot Listings Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedProperties.length > 0 && (\n          <div className=\"bg-cyan-50 border border-cyan-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-cyan-800\">\n                {selectedProperties.length} beach properties selected\n              </span>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"feature\")}\n                  data-testid=\"bulk-feature\"\n                >\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  Feature\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"hot\")}\n                  data-testid=\"bulk-hot\"\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Mark Hot\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleBulkAction(\"delete\")}\n                  data-testid=\"bulk-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Properties Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Select All */}\n          <div className=\"flex items-center space-x-2 p-4 bg-gray-50 rounded-lg\">\n            <Checkbox\n              checked={selectedProperties.length === filteredProperties.length && filteredProperties.length > 0}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"select-all-beach\"\n            />\n            <label className=\"text-sm font-medium\">\n              Select All ({filteredProperties.length} beach properties)\n            </label>\n          </div>\n\n          {filteredProperties.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Waves className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No beach properties found</h3>\n              <p className=\"text-gray-600 mb-4\">No beach properties match your current filters.</p>\n              <Button onClick={() => { setSearch(\"\"); setStatusFilter(\"all\"); }}>\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProperties.map((property) => (\n                <Card key={property.id} className=\"overflow-hidden\">\n                  <div className=\"relative\">\n                    <img\n                      src={Array.isArray(property.images) && property.images.length > 0 \n                        ? property.images[0] \n                        : 'https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'\n                      }\n                      alt={property.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <Checkbox\n                        checked={selectedProperties.includes(property.id)}\n                        onCheckedChange={(checked) => handleSelectProperty(property.id, !!checked)}\n                        className=\"bg-white\"\n                        data-testid={`select-beach-${property.id}`}\n                      />\n                    </div>\n                    <div className=\"absolute top-2 right-2 flex gap-1\">\n                      {property.isFeatured && (\n                        <Badge className=\"bg-yellow-500\">Featured</Badge>\n                      )}\n                      {property.isHot && (\n                        <Badge className=\"bg-red-500\">Hot</Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">{property.title}</CardTitle>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(property.price)}\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{property.location}</p>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-4\">\n                      {property.bedrooms && <span>{property.bedrooms} beds</span>}\n                      {property.bathrooms && <span>{property.bathrooms} baths</span>}\n                      {property.squareFeet && <span>{property.squareFeet.toLocaleString()} sq ft</span>}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                        onClick={() => handleEdit(property)}\n                        data-testid={`edit-beach-${property.id}`}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        data-testid={`view-beach-${property.id}`}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleDelete(property.id)}\n                        data-testid={`delete-beach-${property.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <PropertyEditDialog\n        property={editingProperty}\n        category=\"beach\"\n        open={showEditDialog}\n        onOpenChange={setShowEditDialog}\n        onSuccess={() => {\n          setShowEditDialog(false);\n          setEditingProperty(null);\n          refetch();\n        }}\n      />\n    </div>\n  );\n}","size_bytes":13310},"client/src/pages/admin/listings/commercial.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Star,\n  TrendingUp,\n  Building\n} from \"lucide-react\";\nimport type { Property } from \"@shared/schema\";\nimport PropertyEditDialog from \"../components/property-edit-dialog\";\n\nexport default function AdminCommercial() {\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: properties = [], isLoading, refetch } = useQuery<Property[]>({\n    queryKey: [\"/api/admin/properties\", \"commercial\", search, statusFilter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      params.append('category', 'commercial');\n      if (search) params.append('search', search);\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      return fetch(`/api/admin/properties?${params.toString()}`).then(r => r.json());\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/properties/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Commercial property deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete commercial property\", variant: \"destructive\" });\n    },\n  });\n\n  const bulkMutation = useMutation({\n    mutationFn: ({ action, propertyIds }: { action: string, propertyIds: string[] }) => \n      apiRequest(\"/api/admin/properties/bulk\", \"POST\", { action, propertyIds }),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Bulk operation completed\" });\n      setSelectedProperties([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Bulk operation failed\", variant: \"destructive\" });\n    },\n  });\n\n  const handleEdit = (property: Property) => {\n    setEditingProperty(property);\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this commercial property?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    if (selectedProperties.length === 0) {\n      toast({ title: \"Warning\", description: \"No commercial properties selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (action === \"delete\") {\n      if (!confirm(`Are you sure you want to delete ${selectedProperties.length} commercial properties?`)) {\n        return;\n      }\n    }\n    \n    bulkMutation.mutate({ action, propertyIds: selectedProperties });\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    setSelectedProperties(checked ? properties.map(p => p.id) : []);\n  };\n\n  const handleSelectProperty = (id: string, checked: boolean) => {\n    setSelectedProperties(prev => \n      checked ? [...prev, id] : prev.filter(p => p !== id)\n    );\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);\n  };\n\n  const filteredProperties = properties.filter(property => {\n    const matchesSearch = property.title.toLowerCase().includes(search.toLowerCase()) ||\n                         property.location.toLowerCase().includes(search.toLowerCase());\n    \n    if (statusFilter === \"featured\") return matchesSearch && property.isFeatured;\n    if (statusFilter === \"hot\") return matchesSearch && property.isHot;\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Building className=\"w-8 h-8 text-purple-600\" />\n            <div>\n              <h1 className=\"text-3xl font-bold\">Commercial Properties Management</h1>\n              <p className=\"text-gray-600\">Manage commercial listings, edit details, and control visibility</p>\n            </div>\n          </div>\n          <Button \n            onClick={() => {\n              setEditingProperty(null);\n              setShowEditDialog(true);\n            }}\n            data-testid=\"add-commercial-button\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Commercial Property\n          </Button>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search commercial properties by title or location...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-commercial\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Properties</SelectItem>\n              <SelectItem value=\"featured\">Featured Only</SelectItem>\n              <SelectItem value=\"hot\">Hot Listings Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedProperties.length > 0 && (\n          <div className=\"bg-purple-50 border border-purple-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-purple-800\">\n                {selectedProperties.length} commercial properties selected\n              </span>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"feature\")}\n                  data-testid=\"bulk-feature\"\n                >\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  Feature\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"hot\")}\n                  data-testid=\"bulk-hot\"\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Mark Hot\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleBulkAction(\"delete\")}\n                  data-testid=\"bulk-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Properties Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Select All */}\n          <div className=\"flex items-center space-x-2 p-4 bg-gray-50 rounded-lg\">\n            <Checkbox\n              checked={selectedProperties.length === filteredProperties.length && filteredProperties.length > 0}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"select-all-commercial\"\n            />\n            <label className=\"text-sm font-medium\">\n              Select All ({filteredProperties.length} commercial properties)\n            </label>\n          </div>\n\n          {filteredProperties.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Building className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No commercial properties found</h3>\n              <p className=\"text-gray-600 mb-4\">No commercial properties match your current filters.</p>\n              <Button onClick={() => { setSearch(\"\"); setStatusFilter(\"all\"); }}>\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProperties.map((property) => (\n                <Card key={property.id} className=\"overflow-hidden\">\n                  <div className=\"relative\">\n                    <img\n                      src={Array.isArray(property.images) && property.images.length > 0 \n                        ? property.images[0] \n                        : 'https://images.unsplash.com/photo-1486406146926-c627a92ad1ab?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'\n                      }\n                      alt={property.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <Checkbox\n                        checked={selectedProperties.includes(property.id)}\n                        onCheckedChange={(checked) => handleSelectProperty(property.id, !!checked)}\n                        className=\"bg-white\"\n                        data-testid={`select-commercial-${property.id}`}\n                      />\n                    </div>\n                    <div className=\"absolute top-2 right-2 flex gap-1\">\n                      {property.isFeatured && (\n                        <Badge className=\"bg-yellow-500\">Featured</Badge>\n                      )}\n                      {property.isHot && (\n                        <Badge className=\"bg-red-500\">Hot</Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">{property.title}</CardTitle>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(property.price)}\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{property.location}</p>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-4\">\n                      {property.squareFeet && <span>{property.squareFeet.toLocaleString()} sq ft</span>}\n                      {property.propertyType && <span>{property.propertyType}</span>}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                        onClick={() => handleEdit(property)}\n                        data-testid={`edit-commercial-${property.id}`}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        data-testid={`view-commercial-${property.id}`}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleDelete(property.id)}\n                        data-testid={`delete-commercial-${property.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <PropertyEditDialog\n        property={editingProperty}\n        category=\"commercial\"\n        open={showEditDialog}\n        onOpenChange={setShowEditDialog}\n        onSuccess={() => {\n          setShowEditDialog(false);\n          setEditingProperty(null);\n          refetch();\n        }}\n      />\n    </div>\n  );\n}","size_bytes":13359},"client/src/pages/admin/listings/condos.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Star,\n  TrendingUp,\n  Building2\n} from \"lucide-react\";\nimport type { Property } from \"@shared/schema\";\nimport PropertyEditDialog from \"../components/property-edit-dialog\";\n\nexport default function AdminCondos() {\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: properties = [], isLoading, refetch } = useQuery<Property[]>({\n    queryKey: [\"/api/admin/properties\", \"condos\", search, statusFilter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      params.append('category', 'condos');\n      if (search) params.append('search', search);\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      return fetch(`/api/admin/properties?${params.toString()}`).then(r => r.json());\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/properties/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Condo deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete condo\", variant: \"destructive\" });\n    },\n  });\n\n  const bulkMutation = useMutation({\n    mutationFn: ({ action, propertyIds }: { action: string, propertyIds: string[] }) => \n      apiRequest(\"/api/admin/properties/bulk\", \"POST\", { action, propertyIds }),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Bulk operation completed\" });\n      setSelectedProperties([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Bulk operation failed\", variant: \"destructive\" });\n    },\n  });\n\n  const handleEdit = (property: Property) => {\n    setEditingProperty(property);\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this condo?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    if (selectedProperties.length === 0) {\n      toast({ title: \"Warning\", description: \"No condos selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (action === \"delete\") {\n      if (!confirm(`Are you sure you want to delete ${selectedProperties.length} condos?`)) {\n        return;\n      }\n    }\n    \n    bulkMutation.mutate({ action, propertyIds: selectedProperties });\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    setSelectedProperties(checked ? properties.map(p => p.id) : []);\n  };\n\n  const handleSelectProperty = (id: string, checked: boolean) => {\n    setSelectedProperties(prev => \n      checked ? [...prev, id] : prev.filter(p => p !== id)\n    );\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);\n  };\n\n  const filteredProperties = properties.filter(property => {\n    const matchesSearch = property.title.toLowerCase().includes(search.toLowerCase()) ||\n                         property.location.toLowerCase().includes(search.toLowerCase());\n    \n    if (statusFilter === \"featured\") return matchesSearch && property.isFeatured;\n    if (statusFilter === \"hot\") return matchesSearch && property.isHot;\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Building2 className=\"w-8 h-8 text-blue-600\" />\n            <div>\n              <h1 className=\"text-3xl font-bold\">Condos Management</h1>\n              <p className=\"text-gray-600\">Manage condo listings, edit details, and control visibility</p>\n            </div>\n          </div>\n          <Button \n            onClick={() => {\n              setEditingProperty(null);\n              setShowEditDialog(true);\n            }}\n            data-testid=\"add-condo-button\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Condo\n          </Button>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search condos by title or location...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-condos\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Properties</SelectItem>\n              <SelectItem value=\"featured\">Featured Only</SelectItem>\n              <SelectItem value=\"hot\">Hot Listings Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedProperties.length > 0 && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-blue-800\">\n                {selectedProperties.length} condos selected\n              </span>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"feature\")}\n                  data-testid=\"bulk-feature\"\n                >\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  Feature\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"hot\")}\n                  data-testid=\"bulk-hot\"\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Mark Hot\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleBulkAction(\"delete\")}\n                  data-testid=\"bulk-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Properties Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Select All */}\n          <div className=\"flex items-center space-x-2 p-4 bg-gray-50 rounded-lg\">\n            <Checkbox\n              checked={selectedProperties.length === filteredProperties.length && filteredProperties.length > 0}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"select-all-condos\"\n            />\n            <label className=\"text-sm font-medium\">\n              Select All ({filteredProperties.length} condos)\n            </label>\n          </div>\n\n          {filteredProperties.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Building2 className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No condos found</h3>\n              <p className=\"text-gray-600 mb-4\">No condos match your current filters.</p>\n              <Button onClick={() => { setSearch(\"\"); setStatusFilter(\"all\"); }}>\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProperties.map((property) => (\n                <Card key={property.id} className=\"overflow-hidden\">\n                  <div className=\"relative\">\n                    <img\n                      src={Array.isArray(property.images) && property.images.length > 0 \n                        ? property.images[0] \n                        : 'https://images.unsplash.com/photo-1545324418-cc1a3fa10c00?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'\n                      }\n                      alt={property.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <Checkbox\n                        checked={selectedProperties.includes(property.id)}\n                        onCheckedChange={(checked) => handleSelectProperty(property.id, !!checked)}\n                        className=\"bg-white\"\n                        data-testid={`select-condo-${property.id}`}\n                      />\n                    </div>\n                    <div className=\"absolute top-2 right-2 flex gap-1\">\n                      {property.isFeatured && (\n                        <Badge className=\"bg-yellow-500\">Featured</Badge>\n                      )}\n                      {property.isHot && (\n                        <Badge className=\"bg-red-500\">Hot</Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">{property.title}</CardTitle>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(property.price)}\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{property.location}</p>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-4\">\n                      {property.bedrooms && <span>{property.bedrooms} beds</span>}\n                      {property.bathrooms && <span>{property.bathrooms} baths</span>}\n                      {property.squareFeet && <span>{property.squareFeet.toLocaleString()} sq ft</span>}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                        onClick={() => handleEdit(property)}\n                        data-testid={`edit-condo-${property.id}`}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        data-testid={`view-condo-${property.id}`}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleDelete(property.id)}\n                        data-testid={`delete-condo-${property.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <PropertyEditDialog\n        property={editingProperty}\n        category=\"condos\"\n        open={showEditDialog}\n        onOpenChange={setShowEditDialog}\n        onSuccess={() => {\n          setShowEditDialog(false);\n          setEditingProperty(null);\n          refetch();\n        }}\n      />\n    </div>\n  );\n}","size_bytes":13204},"client/src/pages/admin/listings/houses.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Star,\n  TrendingUp,\n  MoreHorizontal\n} from \"lucide-react\";\nimport type { Property } from \"@shared/schema\";\nimport PropertyEditDialog from \"../components/property-edit-dialog\";\n\nexport default function AdminHouses() {\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: properties = [], isLoading, refetch } = useQuery<Property[]>({\n    queryKey: [\"/api/admin/properties\", \"houses\", search, statusFilter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      params.append('category', 'houses');\n      if (search) params.append('search', search);\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      return fetch(`/api/admin/properties?${params.toString()}`).then(r => r.json());\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/properties/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Property deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete property\", variant: \"destructive\" });\n    },\n  });\n\n  const bulkMutation = useMutation({\n    mutationFn: ({ action, propertyIds }: { action: string, propertyIds: string[] }) => \n      apiRequest(\"/api/admin/properties/bulk\", \"POST\", { action, propertyIds }),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Bulk operation completed\" });\n      setSelectedProperties([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Bulk operation failed\", variant: \"destructive\" });\n    },\n  });\n\n  const handleEdit = (property: Property) => {\n    setEditingProperty(property);\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this property?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    if (selectedProperties.length === 0) {\n      toast({ title: \"Warning\", description: \"No properties selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (action === \"delete\") {\n      if (!confirm(`Are you sure you want to delete ${selectedProperties.length} properties?`)) {\n        return;\n      }\n    }\n    \n    bulkMutation.mutate({ action, propertyIds: selectedProperties });\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    setSelectedProperties(checked ? properties.map(p => p.id) : []);\n  };\n\n  const handleSelectProperty = (id: string, checked: boolean) => {\n    setSelectedProperties(prev => \n      checked ? [...prev, id] : prev.filter(p => p !== id)\n    );\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);\n  };\n\n  const filteredProperties = properties.filter(property => {\n    const matchesSearch = property.title.toLowerCase().includes(search.toLowerCase()) ||\n                         property.location.toLowerCase().includes(search.toLowerCase());\n    \n    if (statusFilter === \"featured\") return matchesSearch && property.isFeatured;\n    if (statusFilter === \"hot\") return matchesSearch && property.isHot;\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Houses Management</h1>\n            <p className=\"text-gray-600\">Manage house listings, edit details, and control visibility</p>\n          </div>\n          <Button \n            onClick={() => {\n              setEditingProperty(null);\n              setShowEditDialog(true);\n            }}\n            data-testid=\"add-house-button\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add House\n          </Button>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search houses by title or location...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-houses\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Properties</SelectItem>\n              <SelectItem value=\"featured\">Featured Only</SelectItem>\n              <SelectItem value=\"hot\">Hot Listings Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedProperties.length > 0 && (\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-blue-800\">\n                {selectedProperties.length} properties selected\n              </span>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"feature\")}\n                  data-testid=\"bulk-feature\"\n                >\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  Feature\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"hot\")}\n                  data-testid=\"bulk-hot\"\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Mark Hot\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleBulkAction(\"delete\")}\n                  data-testid=\"bulk-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Properties Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Select All */}\n          <div className=\"flex items-center space-x-2 p-4 bg-gray-50 rounded-lg\">\n            <Checkbox\n              checked={selectedProperties.length === filteredProperties.length && filteredProperties.length > 0}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"select-all-houses\"\n            />\n            <label className=\"text-sm font-medium\">\n              Select All ({filteredProperties.length} houses)\n            </label>\n          </div>\n\n          {filteredProperties.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No houses found</h3>\n              <p className=\"text-gray-600 mb-4\">No houses match your current filters.</p>\n              <Button onClick={() => { setSearch(\"\"); setStatusFilter(\"all\"); }}>\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProperties.map((property) => (\n                <Card key={property.id} className=\"overflow-hidden\">\n                  <div className=\"relative\">\n                    <img\n                      src={Array.isArray(property.images) && property.images.length > 0 \n                        ? property.images[0] \n                        : 'https://images.unsplash.com/photo-1570129477492-45c003edd2be?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'\n                      }\n                      alt={property.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <Checkbox\n                        checked={selectedProperties.includes(property.id)}\n                        onCheckedChange={(checked) => handleSelectProperty(property.id, !!checked)}\n                        className=\"bg-white\"\n                        data-testid={`select-house-${property.id}`}\n                      />\n                    </div>\n                    <div className=\"absolute top-2 right-2 flex gap-1\">\n                      {property.isFeatured && (\n                        <Badge className=\"bg-yellow-500\">Featured</Badge>\n                      )}\n                      {property.isHot && (\n                        <Badge className=\"bg-red-500\">Hot</Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">{property.title}</CardTitle>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(property.price)}\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{property.location}</p>\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-4\">\n                      {property.bedrooms && <span>{property.bedrooms} beds</span>}\n                      {property.bathrooms && <span>{property.bathrooms} baths</span>}\n                      {property.squareFeet && <span>{property.squareFeet.toLocaleString()} sq ft</span>}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                        onClick={() => handleEdit(property)}\n                        data-testid={`edit-house-${property.id}`}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        data-testid={`view-house-${property.id}`}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleDelete(property.id)}\n                        data-testid={`delete-house-${property.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <PropertyEditDialog\n        property={editingProperty}\n        category=\"houses\"\n        open={showEditDialog}\n        onOpenChange={setShowEditDialog}\n        onSuccess={() => {\n          setShowEditDialog(false);\n          setEditingProperty(null);\n          refetch();\n        }}\n      />\n    </div>\n  );\n}","size_bytes":13015},"client/src/pages/admin/listings/land.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { \n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Search, \n  Edit, \n  Trash2, \n  Eye,\n  Star,\n  TrendingUp,\n  Mountain\n} from \"lucide-react\";\nimport type { Property } from \"@shared/schema\";\nimport PropertyEditDialog from \"../components/property-edit-dialog\";\n\nexport default function AdminLand() {\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedProperties, setSelectedProperties] = useState<string[]>([]);\n  const [editingProperty, setEditingProperty] = useState<Property | null>(null);\n  const [showEditDialog, setShowEditDialog] = useState(false);\n  const { toast } = useToast();\n\n  const { data: properties = [], isLoading, refetch } = useQuery<Property[]>({\n    queryKey: [\"/api/admin/properties\", \"land\", search, statusFilter],\n    queryFn: () => {\n      const params = new URLSearchParams();\n      params.append('category', 'land');\n      if (search) params.append('search', search);\n      if (statusFilter !== 'all') params.append('status', statusFilter);\n      return fetch(`/api/admin/properties?${params.toString()}`).then(r => r.json());\n    }\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/admin/properties/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Property deleted successfully\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Failed to delete property\", variant: \"destructive\" });\n    },\n  });\n\n  const bulkMutation = useMutation({\n    mutationFn: ({ action, propertyIds }: { action: string, propertyIds: string[] }) => \n      apiRequest(\"/api/admin/properties/bulk\", \"POST\", { action, propertyIds }),\n    onSuccess: () => {\n      toast({ title: \"Success\", description: \"Bulk operation completed\" });\n      setSelectedProperties([]);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/properties\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/dashboard/stats\"] });\n    },\n    onError: () => {\n      toast({ title: \"Error\", description: \"Bulk operation failed\", variant: \"destructive\" });\n    },\n  });\n\n  const handleEdit = (property: Property) => {\n    setEditingProperty(property);\n    setShowEditDialog(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this land property?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleBulkAction = (action: string) => {\n    if (selectedProperties.length === 0) {\n      toast({ title: \"Warning\", description: \"No properties selected\", variant: \"destructive\" });\n      return;\n    }\n    \n    if (action === \"delete\") {\n      if (!confirm(`Are you sure you want to delete ${selectedProperties.length} land properties?`)) {\n        return;\n      }\n    }\n    \n    bulkMutation.mutate({ action, propertyIds: selectedProperties });\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    setSelectedProperties(checked ? properties.map(p => p.id) : []);\n  };\n\n  const handleSelectProperty = (id: string, checked: boolean) => {\n    setSelectedProperties(prev => \n      checked ? [...prev, id] : prev.filter(p => p !== id)\n    );\n  };\n\n  const formatPrice = (price: string) => {\n    const num = parseFloat(price);\n    return new Intl.NumberFormat('en-US', { style: 'currency', currency: 'USD' }).format(num);\n  };\n\n  const filteredProperties = properties.filter(property => {\n    const matchesSearch = property.title.toLowerCase().includes(search.toLowerCase()) ||\n                         property.location.toLowerCase().includes(search.toLowerCase());\n    \n    if (statusFilter === \"featured\") return matchesSearch && property.isFeatured;\n    if (statusFilter === \"hot\") return matchesSearch && property.isHot;\n    \n    return matchesSearch;\n  });\n\n  return (\n    <div className=\"p-8\">\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <Mountain className=\"w-8 h-8 text-green-600\" />\n            <div>\n              <h1 className=\"text-3xl font-bold\">Land Management</h1>\n              <p className=\"text-gray-600\">Manage land listings, edit details, and control visibility</p>\n            </div>\n          </div>\n          <Button \n            onClick={() => {\n              setEditingProperty(null);\n              setShowEditDialog(true);\n            }}\n            data-testid=\"add-land-button\"\n          >\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Add Land\n          </Button>\n        </div>\n\n        {/* Filters and Search */}\n        <div className=\"flex flex-col sm:flex-row gap-4 mb-6\">\n          <div className=\"flex-1 relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search land by title or location...\"\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"search-land\"\n            />\n          </div>\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-48\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Properties</SelectItem>\n              <SelectItem value=\"featured\">Featured Only</SelectItem>\n              <SelectItem value=\"hot\">Hot Listings Only</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Bulk Actions */}\n        {selectedProperties.length > 0 && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-green-800\">\n                {selectedProperties.length} land properties selected\n              </span>\n              <div className=\"flex gap-2\">\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"feature\")}\n                  data-testid=\"bulk-feature\"\n                >\n                  <Star className=\"w-3 h-3 mr-1\" />\n                  Feature\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"outline\"\n                  onClick={() => handleBulkAction(\"hot\")}\n                  data-testid=\"bulk-hot\"\n                >\n                  <TrendingUp className=\"w-3 h-3 mr-1\" />\n                  Mark Hot\n                </Button>\n                <Button \n                  size=\"sm\" \n                  variant=\"destructive\"\n                  onClick={() => handleBulkAction(\"delete\")}\n                  data-testid=\"bulk-delete\"\n                >\n                  <Trash2 className=\"w-3 h-3 mr-1\" />\n                  Delete\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Properties Grid */}\n      {isLoading ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {[...Array(6)].map((_, i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-48 bg-gray-200 rounded-lg\"></div>\n            </div>\n          ))}\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          {/* Select All */}\n          <div className=\"flex items-center space-x-2 p-4 bg-gray-50 rounded-lg\">\n            <Checkbox\n              checked={selectedProperties.length === filteredProperties.length && filteredProperties.length > 0}\n              onCheckedChange={handleSelectAll}\n              data-testid=\"select-all-land\"\n            />\n            <label className=\"text-sm font-medium\">\n              Select All ({filteredProperties.length} land properties)\n            </label>\n          </div>\n\n          {filteredProperties.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Mountain className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No land properties found</h3>\n              <p className=\"text-gray-600 mb-4\">No land properties match your current filters.</p>\n              <Button onClick={() => { setSearch(\"\"); setStatusFilter(\"all\"); }}>\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredProperties.map((property) => (\n                <Card key={property.id} className=\"overflow-hidden\">\n                  <div className=\"relative\">\n                    <img\n                      src={Array.isArray(property.images) && property.images.length > 0 \n                        ? property.images[0] \n                        : 'https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&h=600'\n                      }\n                      alt={property.title}\n                      className=\"w-full h-48 object-cover\"\n                    />\n                    <div className=\"absolute top-2 left-2\">\n                      <Checkbox\n                        checked={selectedProperties.includes(property.id)}\n                        onCheckedChange={(checked) => handleSelectProperty(property.id, !!checked)}\n                        className=\"bg-white\"\n                        data-testid={`select-land-${property.id}`}\n                      />\n                    </div>\n                    <div className=\"absolute top-2 right-2 flex gap-1\">\n                      {property.isFeatured && (\n                        <Badge className=\"bg-yellow-500\">Featured</Badge>\n                      )}\n                      {property.isHot && (\n                        <Badge className=\"bg-red-500\">Hot</Badge>\n                      )}\n                    </div>\n                  </div>\n                  \n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-lg\">{property.title}</CardTitle>\n                    <div className=\"text-2xl font-bold text-primary\">\n                      {formatPrice(property.price)}\n                    </div>\n                    <p className=\"text-muted-foreground text-sm\">{property.location}</p>\n                    {property.pricePerSqm && (\n                      <p className=\"text-sm text-green-600\">{property.pricePerSqm} per sqm</p>\n                    )}\n                  </CardHeader>\n                  \n                  <CardContent>\n                    <div className=\"flex justify-between items-center text-sm text-muted-foreground mb-4\">\n                      {property.categoryData && (property.categoryData as any).totalAreaSqm && (\n                        <span>{((property.categoryData as any).totalAreaSqm).toLocaleString()} sqm</span>\n                      )}\n                      {property.categoryData && (property.categoryData as any).totalAreaHectares && (\n                        <span>{(property.categoryData as any).totalAreaHectares} ha</span>\n                      )}\n                      {property.categoryData && (property.categoryData as any).landClassification && (\n                        <span>{(property.categoryData as any).landClassification}</span>\n                      )}\n                    </div>\n                    \n                    <div className=\"flex gap-2\">\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\" \n                        className=\"flex-1\"\n                        onClick={() => handleEdit(property)}\n                        data-testid={`edit-land-${property.id}`}\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        data-testid={`view-land-${property.id}`}\n                      >\n                        <Eye className=\"w-3 h-3\" />\n                      </Button>\n                      <Button \n                        size=\"sm\" \n                        variant=\"outline\"\n                        onClick={() => handleDelete(property.id)}\n                        data-testid={`delete-land-${property.id}`}\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Edit Dialog */}\n      <PropertyEditDialog\n        property={editingProperty}\n        category=\"land\"\n        open={showEditDialog}\n        onOpenChange={setShowEditDialog}\n        onSuccess={() => {\n          setShowEditDialog(false);\n          setEditingProperty(null);\n          refetch();\n        }}\n      />\n    </div>\n  );\n}","size_bytes":13802},"client/src/components/video-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, X } from \"lucide-react\";\n\ninterface VideoModalProps {\n  videoUrl: string;\n  title?: string;\n  children?: React.ReactNode;\n}\n\n// Helper function to get embed URL for different video platforms\nfunction getEmbedUrl(url: string): string {\n  if (!url) return \"\";\n\n  // YouTube URL patterns\n  const youtubeRegex = /(?:youtube\\.com\\/(?:[^\\/]+\\/.+\\/|(?:v|e(?:mbed)?)\\/|.*[?&]v=)|youtu\\.be\\/)([^\"&?\\/\\s]{11})/;\n  const youtubeMatch = url.match(youtubeRegex);\n  \n  if (youtubeMatch) {\n    return `https://www.youtube.com/embed/${youtubeMatch[1]}?autoplay=1&rel=0`;\n  }\n\n  // Vimeo URL patterns\n  const vimeoRegex = /(?:vimeo\\.com\\/)([0-9]+)/;\n  const vimeoMatch = url.match(vimeoRegex);\n  \n  if (vimeoMatch) {\n    return `https://player.vimeo.com/video/${vimeoMatch[1]}?autoplay=1`;\n  }\n\n  // If it's already an embed URL or other format, return as is\n  return url;\n}\n\nexport function VideoModal({ videoUrl, title = \"Property Video\", children }: VideoModalProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const embedUrl = getEmbedUrl(videoUrl);\n\n  if (!videoUrl) return null;\n\n  return (\n    <>\n      {/* Trigger Button */}\n      {children ? (\n        <div onClick={() => setIsOpen(true)} className=\"cursor-pointer\">\n          {children}\n        </div>\n      ) : (\n        <Button\n          onClick={() => setIsOpen(true)}\n          className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium px-4 py-2 rounded-lg flex items-center gap-2\"\n          data-testid=\"watch-video-button\"\n        >\n          <Play className=\"w-4 h-4\" />\n          Watch Video\n        </Button>\n      )}\n\n      {/* Video Modal */}\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"max-w-4xl w-full h-[80vh] p-0\" aria-describedby=\"video-description\">\n          <DialogHeader className=\"p-6 pb-0\">\n            <DialogTitle>{title}</DialogTitle>\n            <DialogDescription id=\"video-description\">\n              Property video tour and details\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"flex-1 p-6 pt-4\">\n            {embedUrl ? (\n              <div className=\"w-full h-full\">\n                <iframe\n                  src={embedUrl}\n                  title={title}\n                  className=\"w-full h-full rounded-lg\"\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                  data-testid=\"video-iframe\"\n                />\n              </div>\n            ) : (\n              <div className=\"w-full h-full flex items-center justify-center bg-gray-100 rounded-lg\">\n                <div className=\"text-center\">\n                  <Play className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\n                  <p className=\"text-gray-600\">Unable to load video</p>\n                  <p className=\"text-sm text-gray-500 mt-2\">Please check the video URL</p>\n                </div>\n              </div>\n            )}\n          </div>\n\n          {/* Close button */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute top-4 right-4\"\n            onClick={() => setIsOpen(false)}\n            data-testid=\"close-video-modal\"\n          >\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\nexport default VideoModal;","size_bytes":3648}},"version":1}